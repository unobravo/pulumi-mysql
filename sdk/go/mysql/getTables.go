// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unobravo/pulumi-mysql/sdk/go/mysql/internal"
)

// The “getTables“ gets tables on a MySQL
// server.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/unobravo/pulumi-mysql/sdk/go/mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mysql.GetTables(ctx, &mysql.GetTablesArgs{
//				Database: "my_awesome_app",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetTables(ctx *pulumi.Context, args *GetTablesArgs, opts ...pulumi.InvokeOption) (*GetTablesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTablesResult
	err := ctx.Invoke("mysql:index/getTables:getTables", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTables.
type GetTablesArgs struct {
	// The name of the database.
	Database string `pulumi:"database"`
	// Patterns for searching tables.
	Pattern *string `pulumi:"pattern"`
}

// A collection of values returned by getTables.
type GetTablesResult struct {
	Database string `pulumi:"database"`
	// The provider-assigned unique ID for this managed resource.
	Id      string  `pulumi:"id"`
	Pattern *string `pulumi:"pattern"`
	// The list of the table names.
	Tables []string `pulumi:"tables"`
}

func GetTablesOutput(ctx *pulumi.Context, args GetTablesOutputArgs, opts ...pulumi.InvokeOption) GetTablesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTablesResult, error) {
			args := v.(GetTablesArgs)
			r, err := GetTables(ctx, &args, opts...)
			var s GetTablesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTablesResultOutput)
}

// A collection of arguments for invoking getTables.
type GetTablesOutputArgs struct {
	// The name of the database.
	Database pulumi.StringInput `pulumi:"database"`
	// Patterns for searching tables.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
}

func (GetTablesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesArgs)(nil)).Elem()
}

// A collection of values returned by getTables.
type GetTablesResultOutput struct{ *pulumi.OutputState }

func (GetTablesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesResult)(nil)).Elem()
}

func (o GetTablesResultOutput) ToGetTablesResultOutput() GetTablesResultOutput {
	return o
}

func (o GetTablesResultOutput) ToGetTablesResultOutputWithContext(ctx context.Context) GetTablesResultOutput {
	return o
}

func (o GetTablesResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesResult) string { return v.Database }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetTablesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTablesResultOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTablesResult) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// The list of the table names.
func (o GetTablesResultOutput) Tables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTablesResult) []string { return v.Tables }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTablesResultOutput{})
}
