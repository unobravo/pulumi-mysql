// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unobravo/pulumi-mysql/sdk/go/mysql/internal"
)

// The “GlobalVariable“ resource manages a global variables on a MySQL
// server.
//
// > **Note on MySQL:** MySQL global variables are [not persistent](https://dev.mysql.com/doc/refman/5.7/en/set-variable.html)
//
// > **Note on TiDB:** TiDB global variables are [persistent](https://docs.pingcap.com/tidb/v5.4/sql-statement-set-variable#mysql-compatibility)
//
// > **Note about `destroy`:** `destroy` will try assign `DEFAULT` value for global variable.
//
//	Unfortunately not every variable support this.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/unobravo/pulumi-mysql/sdk/go/mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mysql.NewGlobalVariable(ctx, "maxConnections", &mysql.GlobalVariableArgs{
//				Value: pulumi.String("100"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Global variable can be imported using global variable name.
//
// ```sh
// $ pulumi import mysql:index/globalVariable:GlobalVariable max_connections max_connections
// ```
type GlobalVariable struct {
	pulumi.CustomResourceState

	// The name of the global variable.
	Name pulumi.StringOutput `pulumi:"name"`
	// The value of the global variable.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewGlobalVariable registers a new resource with the given unique name, arguments, and options.
func NewGlobalVariable(ctx *pulumi.Context,
	name string, args *GlobalVariableArgs, opts ...pulumi.ResourceOption) (*GlobalVariable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlobalVariable
	err := ctx.RegisterResource("mysql:index/globalVariable:GlobalVariable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalVariable gets an existing GlobalVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalVariable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalVariableState, opts ...pulumi.ResourceOption) (*GlobalVariable, error) {
	var resource GlobalVariable
	err := ctx.ReadResource("mysql:index/globalVariable:GlobalVariable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalVariable resources.
type globalVariableState struct {
	// The name of the global variable.
	Name *string `pulumi:"name"`
	// The value of the global variable.
	Value *string `pulumi:"value"`
}

type GlobalVariableState struct {
	// The name of the global variable.
	Name pulumi.StringPtrInput
	// The value of the global variable.
	Value pulumi.StringPtrInput
}

func (GlobalVariableState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalVariableState)(nil)).Elem()
}

type globalVariableArgs struct {
	// The name of the global variable.
	Name *string `pulumi:"name"`
	// The value of the global variable.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a GlobalVariable resource.
type GlobalVariableArgs struct {
	// The name of the global variable.
	Name pulumi.StringPtrInput
	// The value of the global variable.
	Value pulumi.StringInput
}

func (GlobalVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalVariableArgs)(nil)).Elem()
}

type GlobalVariableInput interface {
	pulumi.Input

	ToGlobalVariableOutput() GlobalVariableOutput
	ToGlobalVariableOutputWithContext(ctx context.Context) GlobalVariableOutput
}

func (*GlobalVariable) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalVariable)(nil)).Elem()
}

func (i *GlobalVariable) ToGlobalVariableOutput() GlobalVariableOutput {
	return i.ToGlobalVariableOutputWithContext(context.Background())
}

func (i *GlobalVariable) ToGlobalVariableOutputWithContext(ctx context.Context) GlobalVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalVariableOutput)
}

// GlobalVariableArrayInput is an input type that accepts GlobalVariableArray and GlobalVariableArrayOutput values.
// You can construct a concrete instance of `GlobalVariableArrayInput` via:
//
//	GlobalVariableArray{ GlobalVariableArgs{...} }
type GlobalVariableArrayInput interface {
	pulumi.Input

	ToGlobalVariableArrayOutput() GlobalVariableArrayOutput
	ToGlobalVariableArrayOutputWithContext(context.Context) GlobalVariableArrayOutput
}

type GlobalVariableArray []GlobalVariableInput

func (GlobalVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalVariable)(nil)).Elem()
}

func (i GlobalVariableArray) ToGlobalVariableArrayOutput() GlobalVariableArrayOutput {
	return i.ToGlobalVariableArrayOutputWithContext(context.Background())
}

func (i GlobalVariableArray) ToGlobalVariableArrayOutputWithContext(ctx context.Context) GlobalVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalVariableArrayOutput)
}

// GlobalVariableMapInput is an input type that accepts GlobalVariableMap and GlobalVariableMapOutput values.
// You can construct a concrete instance of `GlobalVariableMapInput` via:
//
//	GlobalVariableMap{ "key": GlobalVariableArgs{...} }
type GlobalVariableMapInput interface {
	pulumi.Input

	ToGlobalVariableMapOutput() GlobalVariableMapOutput
	ToGlobalVariableMapOutputWithContext(context.Context) GlobalVariableMapOutput
}

type GlobalVariableMap map[string]GlobalVariableInput

func (GlobalVariableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalVariable)(nil)).Elem()
}

func (i GlobalVariableMap) ToGlobalVariableMapOutput() GlobalVariableMapOutput {
	return i.ToGlobalVariableMapOutputWithContext(context.Background())
}

func (i GlobalVariableMap) ToGlobalVariableMapOutputWithContext(ctx context.Context) GlobalVariableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalVariableMapOutput)
}

type GlobalVariableOutput struct{ *pulumi.OutputState }

func (GlobalVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalVariable)(nil)).Elem()
}

func (o GlobalVariableOutput) ToGlobalVariableOutput() GlobalVariableOutput {
	return o
}

func (o GlobalVariableOutput) ToGlobalVariableOutputWithContext(ctx context.Context) GlobalVariableOutput {
	return o
}

// The name of the global variable.
func (o GlobalVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalVariable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The value of the global variable.
func (o GlobalVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalVariable) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type GlobalVariableArrayOutput struct{ *pulumi.OutputState }

func (GlobalVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalVariable)(nil)).Elem()
}

func (o GlobalVariableArrayOutput) ToGlobalVariableArrayOutput() GlobalVariableArrayOutput {
	return o
}

func (o GlobalVariableArrayOutput) ToGlobalVariableArrayOutputWithContext(ctx context.Context) GlobalVariableArrayOutput {
	return o
}

func (o GlobalVariableArrayOutput) Index(i pulumi.IntInput) GlobalVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlobalVariable {
		return vs[0].([]*GlobalVariable)[vs[1].(int)]
	}).(GlobalVariableOutput)
}

type GlobalVariableMapOutput struct{ *pulumi.OutputState }

func (GlobalVariableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalVariable)(nil)).Elem()
}

func (o GlobalVariableMapOutput) ToGlobalVariableMapOutput() GlobalVariableMapOutput {
	return o
}

func (o GlobalVariableMapOutput) ToGlobalVariableMapOutputWithContext(ctx context.Context) GlobalVariableMapOutput {
	return o
}

func (o GlobalVariableMapOutput) MapIndex(k pulumi.StringInput) GlobalVariableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlobalVariable {
		return vs[0].(map[string]*GlobalVariable)[vs[1].(string)]
	}).(GlobalVariableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalVariableInput)(nil)).Elem(), &GlobalVariable{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalVariableArrayInput)(nil)).Elem(), GlobalVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalVariableMapInput)(nil)).Elem(), GlobalVariableMap{})
	pulumi.RegisterOutputType(GlobalVariableOutput{})
	pulumi.RegisterOutputType(GlobalVariableArrayOutput{})
	pulumi.RegisterOutputType(GlobalVariableMapOutput{})
}
