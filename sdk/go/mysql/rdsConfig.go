// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/unobravo/pulumi-mysql/sdk/go/mysql/internal"
)

// The “RdsConfig“ resource manages two configurations supported by AWS RDS MySQL
// server.
//
// > **Note:** This resource only works with AMAZON RDS MySQL.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/unobravo/pulumi-mysql/sdk/go/mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mysql.NewRdsConfig(ctx, "this", &mysql.RdsConfigArgs{
//				BinlogRetentionHours:   pulumi.Int(48),
//				ReplicationTargetDelay: pulumi.Int(3200),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// # RDS config can be imported with any ID name
//
// Example Usage:
//
// ```sh
// $ pulumi import mysql:index/rdsConfig:RdsConfig <tf_name> <any random ID>
// ```
type RdsConfig struct {
	pulumi.CustomResourceState

	// binlog retention period in hours
	BinlogRetentionHours pulumi.IntPtrOutput `pulumi:"binlogRetentionHours"`
	// replicaation target delay in seconds
	//
	// [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
	ReplicationTargetDelay pulumi.IntPtrOutput `pulumi:"replicationTargetDelay"`
}

// NewRdsConfig registers a new resource with the given unique name, arguments, and options.
func NewRdsConfig(ctx *pulumi.Context,
	name string, args *RdsConfigArgs, opts ...pulumi.ResourceOption) (*RdsConfig, error) {
	if args == nil {
		args = &RdsConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsConfig
	err := ctx.RegisterResource("mysql:index/rdsConfig:RdsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsConfig gets an existing RdsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsConfigState, opts ...pulumi.ResourceOption) (*RdsConfig, error) {
	var resource RdsConfig
	err := ctx.ReadResource("mysql:index/rdsConfig:RdsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsConfig resources.
type rdsConfigState struct {
	// binlog retention period in hours
	BinlogRetentionHours *int `pulumi:"binlogRetentionHours"`
	// replicaation target delay in seconds
	//
	// [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
	ReplicationTargetDelay *int `pulumi:"replicationTargetDelay"`
}

type RdsConfigState struct {
	// binlog retention period in hours
	BinlogRetentionHours pulumi.IntPtrInput
	// replicaation target delay in seconds
	//
	// [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
	ReplicationTargetDelay pulumi.IntPtrInput
}

func (RdsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsConfigState)(nil)).Elem()
}

type rdsConfigArgs struct {
	// binlog retention period in hours
	BinlogRetentionHours *int `pulumi:"binlogRetentionHours"`
	// replicaation target delay in seconds
	//
	// [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
	ReplicationTargetDelay *int `pulumi:"replicationTargetDelay"`
}

// The set of arguments for constructing a RdsConfig resource.
type RdsConfigArgs struct {
	// binlog retention period in hours
	BinlogRetentionHours pulumi.IntPtrInput
	// replicaation target delay in seconds
	//
	// [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
	ReplicationTargetDelay pulumi.IntPtrInput
}

func (RdsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsConfigArgs)(nil)).Elem()
}

type RdsConfigInput interface {
	pulumi.Input

	ToRdsConfigOutput() RdsConfigOutput
	ToRdsConfigOutputWithContext(ctx context.Context) RdsConfigOutput
}

func (*RdsConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsConfig)(nil)).Elem()
}

func (i *RdsConfig) ToRdsConfigOutput() RdsConfigOutput {
	return i.ToRdsConfigOutputWithContext(context.Background())
}

func (i *RdsConfig) ToRdsConfigOutputWithContext(ctx context.Context) RdsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsConfigOutput)
}

// RdsConfigArrayInput is an input type that accepts RdsConfigArray and RdsConfigArrayOutput values.
// You can construct a concrete instance of `RdsConfigArrayInput` via:
//
//	RdsConfigArray{ RdsConfigArgs{...} }
type RdsConfigArrayInput interface {
	pulumi.Input

	ToRdsConfigArrayOutput() RdsConfigArrayOutput
	ToRdsConfigArrayOutputWithContext(context.Context) RdsConfigArrayOutput
}

type RdsConfigArray []RdsConfigInput

func (RdsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsConfig)(nil)).Elem()
}

func (i RdsConfigArray) ToRdsConfigArrayOutput() RdsConfigArrayOutput {
	return i.ToRdsConfigArrayOutputWithContext(context.Background())
}

func (i RdsConfigArray) ToRdsConfigArrayOutputWithContext(ctx context.Context) RdsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsConfigArrayOutput)
}

// RdsConfigMapInput is an input type that accepts RdsConfigMap and RdsConfigMapOutput values.
// You can construct a concrete instance of `RdsConfigMapInput` via:
//
//	RdsConfigMap{ "key": RdsConfigArgs{...} }
type RdsConfigMapInput interface {
	pulumi.Input

	ToRdsConfigMapOutput() RdsConfigMapOutput
	ToRdsConfigMapOutputWithContext(context.Context) RdsConfigMapOutput
}

type RdsConfigMap map[string]RdsConfigInput

func (RdsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsConfig)(nil)).Elem()
}

func (i RdsConfigMap) ToRdsConfigMapOutput() RdsConfigMapOutput {
	return i.ToRdsConfigMapOutputWithContext(context.Background())
}

func (i RdsConfigMap) ToRdsConfigMapOutputWithContext(ctx context.Context) RdsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsConfigMapOutput)
}

type RdsConfigOutput struct{ *pulumi.OutputState }

func (RdsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsConfig)(nil)).Elem()
}

func (o RdsConfigOutput) ToRdsConfigOutput() RdsConfigOutput {
	return o
}

func (o RdsConfigOutput) ToRdsConfigOutputWithContext(ctx context.Context) RdsConfigOutput {
	return o
}

// binlog retention period in hours
func (o RdsConfigOutput) BinlogRetentionHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RdsConfig) pulumi.IntPtrOutput { return v.BinlogRetentionHours }).(pulumi.IntPtrOutput)
}

// replicaation target delay in seconds
//
// [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
func (o RdsConfigOutput) ReplicationTargetDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RdsConfig) pulumi.IntPtrOutput { return v.ReplicationTargetDelay }).(pulumi.IntPtrOutput)
}

type RdsConfigArrayOutput struct{ *pulumi.OutputState }

func (RdsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsConfig)(nil)).Elem()
}

func (o RdsConfigArrayOutput) ToRdsConfigArrayOutput() RdsConfigArrayOutput {
	return o
}

func (o RdsConfigArrayOutput) ToRdsConfigArrayOutputWithContext(ctx context.Context) RdsConfigArrayOutput {
	return o
}

func (o RdsConfigArrayOutput) Index(i pulumi.IntInput) RdsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsConfig {
		return vs[0].([]*RdsConfig)[vs[1].(int)]
	}).(RdsConfigOutput)
}

type RdsConfigMapOutput struct{ *pulumi.OutputState }

func (RdsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsConfig)(nil)).Elem()
}

func (o RdsConfigMapOutput) ToRdsConfigMapOutput() RdsConfigMapOutput {
	return o
}

func (o RdsConfigMapOutput) ToRdsConfigMapOutputWithContext(ctx context.Context) RdsConfigMapOutput {
	return o
}

func (o RdsConfigMapOutput) MapIndex(k pulumi.StringInput) RdsConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsConfig {
		return vs[0].(map[string]*RdsConfig)[vs[1].(string)]
	}).(RdsConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsConfigInput)(nil)).Elem(), &RdsConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsConfigArrayInput)(nil)).Elem(), RdsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsConfigMapInput)(nil)).Elem(), RdsConfigMap{})
	pulumi.RegisterOutputType(RdsConfigOutput{})
	pulumi.RegisterOutputType(RdsConfigArrayOutput{})
	pulumi.RegisterOutputType(RdsConfigMapOutput{})
}
