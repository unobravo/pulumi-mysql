// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The ``mysql.DefaultRoles`` resource creates and manages a user's default roles on a MySQL server.
 *
 * > **Note:** This resource is available on MySQL version 8.0.0 and later.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mysql from "@unobravo/pulumi-mysql";
 *
 * const readonly = new mysql.Role("readonly", {});
 * const jdoeUser = new mysql.User("jdoeUser", {
 *     user: "jdoe",
 *     host: "%",
 * });
 * const jdoeGrant = new mysql.Grant("jdoeGrant", {
 *     user: jdoeUser.user,
 *     host: jdoeUser.host,
 *     database: "",
 *     roles: [readonly.name],
 * });
 * const jdoeDefaultRoles = new mysql.DefaultRoles("jdoeDefaultRoles", {
 *     user: jdoeUser.user,
 *     host: jdoeUser.host,
 *     roles: jdoeGrant.roles,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * User default roles can be imported using user and host.
 *
 * ```sh
 * $ pulumi import mysql:index/defaultRoles:DefaultRoles example user@host
 * ```
 */
export class DefaultRoles extends pulumi.CustomResource {
    /**
     * Get an existing DefaultRoles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultRolesState, opts?: pulumi.CustomResourceOptions): DefaultRoles {
        return new DefaultRoles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mysql:index/defaultRoles:DefaultRoles';

    /**
     * Returns true if the given object is an instance of DefaultRoles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultRoles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultRoles.__pulumiType;
    }

    /**
     * The source host of the user. Defaults to "localhost".
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * A list of default roles to assign to the user. By default no roles are assigned.
     *
     * > **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * The name of the user.
     */
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a DefaultRoles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultRolesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultRolesArgs | DefaultRolesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultRolesState | undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as DefaultRolesArgs | undefined;
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultRoles.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DefaultRoles resources.
 */
export interface DefaultRolesState {
    /**
     * The source host of the user. Defaults to "localhost".
     */
    host?: pulumi.Input<string>;
    /**
     * A list of default roles to assign to the user. By default no roles are assigned.
     *
     * > **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the user.
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultRoles resource.
 */
export interface DefaultRolesArgs {
    /**
     * The source host of the user. Defaults to "localhost".
     */
    host?: pulumi.Input<string>;
    /**
     * A list of default roles to assign to the user. By default no roles are assigned.
     *
     * > **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the user.
     */
    user: pulumi.Input<string>;
}
