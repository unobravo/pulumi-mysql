// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The ``mysql.TiConfig`` resource manages a TiKV or PD variables on a TiDB cluster.
 *
 * > **Note on TiDB:** Possible TiKV or PD variables are available [here](https://docs.pingcap.com/tidb/stable/dynamic-config)
 *
 * > **Note about `destroy`:** `destroy` is trying restore default values as described here.
 *   Unfortunately not every variable support this.
 *
 * ## Example Usage
 *
 * ### PD
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mysql from "@pulumi/mysql";
 *
 * const logLevel = new mysql.TiConfig("logLevel", {
 *     type: "pd",
 *     value: "warn",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Set variable for all PD instances
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mysql from "@pulumi/mysql";
 *
 * const logLevel = new mysql.TiConfig("logLevel", {
 *     type: "pd",
 *     value: "warn",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Set variable for one PD instance only
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mysql from "@pulumi/mysql";
 *
 * const logLevel = new mysql.TiConfig("logLevel", {
 *     instance: "127.0.0.1:2379",
 *     type: "pd",
 *     value: "warn",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## TiKV
 *
 * ### Set varibale for all TiKV instances
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mysql from "@pulumi/mysql";
 *
 * const splitQpsThreshold = new mysql.TiConfig("splitQpsThreshold", {
 *     type: "tikv",
 *     value: "100",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * #### Set variable for one TiKV instance only
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mysql from "@pulumi/mysql";
 *
 * const splitQpsThreshold = new mysql.TiConfig("splitQpsThreshold", {
 *     instance: "127.0.0.1:20180",
 *     type: "tikv",
 *     value: "10",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * ### Simple example
 *
 * #### TiKV example
 *
 * ```sh
 * $ pulumi import mysql:index/tiConfig:TiConfig split_qps_threshold' 'tikv#split-qps-threshold'
 * ```
 *
 * Import value for specific instance
 *
 * ```sh
 * $ pulumi import mysql:index/tiConfig:TiConfig split_qps_threshold' 'tikv#split-qps-threshold#127.0.0.1:20180'
 * ```
 *
 * #### PD example
 *
 * ```sh
 * $ pulumi import mysql:index/tiConfig:TiConfig log_level' 'pd#log.level'
 * ```
 */
export class TiConfig extends pulumi.CustomResource {
    /**
     * Get an existing TiConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TiConfigState, opts?: pulumi.CustomResourceOptions): TiConfig {
        return new TiConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mysql:index/tiConfig:TiConfig';

    /**
     * Returns true if the given object is an instance of TiConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TiConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TiConfig.__pulumiType;
    }

    public readonly instance!: pulumi.Output<string | undefined>;
    /**
     * The name of the configuration variable.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The instance type to configure. Possible values are tikv or pd.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The value of the configuration variable as string.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a TiConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TiConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TiConfigArgs | TiConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TiConfigState | undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as TiConfigArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TiConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TiConfig resources.
 */
export interface TiConfigState {
    instance?: pulumi.Input<string>;
    /**
     * The name of the configuration variable.
     */
    name?: pulumi.Input<string>;
    /**
     * The instance type to configure. Possible values are tikv or pd.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the configuration variable as string.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TiConfig resource.
 */
export interface TiConfigArgs {
    instance?: pulumi.Input<string>;
    /**
     * The name of the configuration variable.
     */
    name?: pulumi.Input<string>;
    /**
     * The instance type to configure. Possible values are tikv or pd.
     */
    type: pulumi.Input<string>;
    /**
     * The value of the configuration variable as string.
     */
    value: pulumi.Input<string>;
}
