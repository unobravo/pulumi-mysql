# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 user: pulumi.Input[str],
                 aad_identity: Optional[pulumi.Input['UserAadIdentityArgs']] = None,
                 auth_plugin: Optional[pulumi.Input[str]] = None,
                 auth_string_hashed: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 plaintext_password: Optional[pulumi.Input[str]] = None,
                 retain_old_password: Optional[pulumi.Input[bool]] = None,
                 tls_option: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[str] user: The name of the user.
        :param pulumi.Input['UserAadIdentityArgs'] aad_identity: Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.
        :param pulumi.Input[str] auth_plugin: Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.
        :param pulumi.Input[str] auth_string_hashed: Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.
        :param pulumi.Input[str] host: The source host of the user. Defaults to "localhost".
        :param pulumi.Input[str] password: Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.
        :param pulumi.Input[str] plaintext_password: The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.
        :param pulumi.Input[bool] retain_old_password: When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.
        :param pulumi.Input[str] tls_option: An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.
               
               [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
        """
        pulumi.set(__self__, "user", user)
        if aad_identity is not None:
            pulumi.set(__self__, "aad_identity", aad_identity)
        if auth_plugin is not None:
            pulumi.set(__self__, "auth_plugin", auth_plugin)
        if auth_string_hashed is not None:
            pulumi.set(__self__, "auth_string_hashed", auth_string_hashed)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            warnings.warn("""Please use plaintext_password instead""", DeprecationWarning)
            pulumi.log.warn("""password is deprecated: Please use plaintext_password instead""")
        if password is not None:
            pulumi.set(__self__, "password", password)
        if plaintext_password is not None:
            pulumi.set(__self__, "plaintext_password", plaintext_password)
        if retain_old_password is not None:
            pulumi.set(__self__, "retain_old_password", retain_old_password)
        if tls_option is not None:
            pulumi.set(__self__, "tls_option", tls_option)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        The name of the user.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="aadIdentity")
    def aad_identity(self) -> Optional[pulumi.Input['UserAadIdentityArgs']]:
        """
        Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.
        """
        return pulumi.get(self, "aad_identity")

    @aad_identity.setter
    def aad_identity(self, value: Optional[pulumi.Input['UserAadIdentityArgs']]):
        pulumi.set(self, "aad_identity", value)

    @property
    @pulumi.getter(name="authPlugin")
    def auth_plugin(self) -> Optional[pulumi.Input[str]]:
        """
        Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.
        """
        return pulumi.get(self, "auth_plugin")

    @auth_plugin.setter
    def auth_plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_plugin", value)

    @property
    @pulumi.getter(name="authStringHashed")
    def auth_string_hashed(self) -> Optional[pulumi.Input[str]]:
        """
        Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.
        """
        return pulumi.get(self, "auth_string_hashed")

    @auth_string_hashed.setter
    def auth_string_hashed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_string_hashed", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The source host of the user. Defaults to "localhost".
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.
        """
        warnings.warn("""Please use plaintext_password instead""", DeprecationWarning)
        pulumi.log.warn("""password is deprecated: Please use plaintext_password instead""")

        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="plaintextPassword")
    def plaintext_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.
        """
        return pulumi.get(self, "plaintext_password")

    @plaintext_password.setter
    def plaintext_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plaintext_password", value)

    @property
    @pulumi.getter(name="retainOldPassword")
    def retain_old_password(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.
        """
        return pulumi.get(self, "retain_old_password")

    @retain_old_password.setter
    def retain_old_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retain_old_password", value)

    @property
    @pulumi.getter(name="tlsOption")
    def tls_option(self) -> Optional[pulumi.Input[str]]:
        """
        An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.

        [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
        """
        return pulumi.get(self, "tls_option")

    @tls_option.setter
    def tls_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_option", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 aad_identity: Optional[pulumi.Input['UserAadIdentityArgs']] = None,
                 auth_plugin: Optional[pulumi.Input[str]] = None,
                 auth_string_hashed: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 plaintext_password: Optional[pulumi.Input[str]] = None,
                 retain_old_password: Optional[pulumi.Input[bool]] = None,
                 tls_option: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input['UserAadIdentityArgs'] aad_identity: Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.
        :param pulumi.Input[str] auth_plugin: Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.
        :param pulumi.Input[str] auth_string_hashed: Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.
        :param pulumi.Input[str] host: The source host of the user. Defaults to "localhost".
        :param pulumi.Input[str] password: Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.
        :param pulumi.Input[str] plaintext_password: The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.
        :param pulumi.Input[bool] retain_old_password: When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.
        :param pulumi.Input[str] tls_option: An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.
               
               [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
        :param pulumi.Input[str] user: The name of the user.
        """
        if aad_identity is not None:
            pulumi.set(__self__, "aad_identity", aad_identity)
        if auth_plugin is not None:
            pulumi.set(__self__, "auth_plugin", auth_plugin)
        if auth_string_hashed is not None:
            pulumi.set(__self__, "auth_string_hashed", auth_string_hashed)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            warnings.warn("""Please use plaintext_password instead""", DeprecationWarning)
            pulumi.log.warn("""password is deprecated: Please use plaintext_password instead""")
        if password is not None:
            pulumi.set(__self__, "password", password)
        if plaintext_password is not None:
            pulumi.set(__self__, "plaintext_password", plaintext_password)
        if retain_old_password is not None:
            pulumi.set(__self__, "retain_old_password", retain_old_password)
        if tls_option is not None:
            pulumi.set(__self__, "tls_option", tls_option)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="aadIdentity")
    def aad_identity(self) -> Optional[pulumi.Input['UserAadIdentityArgs']]:
        """
        Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.
        """
        return pulumi.get(self, "aad_identity")

    @aad_identity.setter
    def aad_identity(self, value: Optional[pulumi.Input['UserAadIdentityArgs']]):
        pulumi.set(self, "aad_identity", value)

    @property
    @pulumi.getter(name="authPlugin")
    def auth_plugin(self) -> Optional[pulumi.Input[str]]:
        """
        Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.
        """
        return pulumi.get(self, "auth_plugin")

    @auth_plugin.setter
    def auth_plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_plugin", value)

    @property
    @pulumi.getter(name="authStringHashed")
    def auth_string_hashed(self) -> Optional[pulumi.Input[str]]:
        """
        Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.
        """
        return pulumi.get(self, "auth_string_hashed")

    @auth_string_hashed.setter
    def auth_string_hashed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_string_hashed", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The source host of the user. Defaults to "localhost".
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.
        """
        warnings.warn("""Please use plaintext_password instead""", DeprecationWarning)
        pulumi.log.warn("""password is deprecated: Please use plaintext_password instead""")

        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="plaintextPassword")
    def plaintext_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.
        """
        return pulumi.get(self, "plaintext_password")

    @plaintext_password.setter
    def plaintext_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plaintext_password", value)

    @property
    @pulumi.getter(name="retainOldPassword")
    def retain_old_password(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.
        """
        return pulumi.get(self, "retain_old_password")

    @retain_old_password.setter
    def retain_old_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retain_old_password", value)

    @property
    @pulumi.getter(name="tlsOption")
    def tls_option(self) -> Optional[pulumi.Input[str]]:
        """
        An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.

        [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
        """
        return pulumi.get(self, "tls_option")

    @tls_option.setter
    def tls_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_option", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the user.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aad_identity: Optional[pulumi.Input[pulumi.InputType['UserAadIdentityArgs']]] = None,
                 auth_plugin: Optional[pulumi.Input[str]] = None,
                 auth_string_hashed: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 plaintext_password: Optional[pulumi.Input[str]] = None,
                 retain_old_password: Optional[pulumi.Input[bool]] = None,
                 tls_option: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The ``User`` resource creates and manages a user on a MySQL
        server.

        > **Note:** The password for the user is provided in plain text, and is
        obscured by an unsalted hash in the state
        Read more about sensitive data in state.
        Care is required when using this resource, to avoid disclosing the password.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        jdoe = mysql.User("jdoe",
            host="example.com",
            plaintext_password="password",
            user="jdoe")
        ```
        <!--End PulumiCodeChooser -->

        ### With An Authentication Plugin

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        nologin = mysql.User("nologin",
            auth_plugin="mysql_no_login",
            host="example.com",
            user="nologin")
        ```
        <!--End PulumiCodeChooser -->

        ### With An Authentication Plugin And Hashed Password

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        nologin = mysql.User("nologin",
            auth_plugin="mysql_native_password",
            auth_string_hashed="*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19",
            host="example.com",
            user="nologin")
        ```
        <!--End PulumiCodeChooser -->

        ### With AzureAD Authentication Plugin

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        aadupn = mysql.User("aadupn",
            aad_identity=mysql.UserAadIdentityArgs(
                identity="little.johny@doe.onmicrosoft.com",
                type="user",
            ),
            auth_plugin="aad_auth",
            user="aliasToUseWhenConnectiong")
        ```
        <!--End PulumiCodeChooser -->

        > **Note on Azure Database for MySQL Single Server resource:** If you want to use this for `service_principal` with older Azure Database for MySQL Single Server resource, you need to set param `aad_auth_validate_oids_in_tenant` to `OFF` in provider configuration. For more details see this issue.

        ## Import

        Users can be imported using user and host.

        ```sh
        $ pulumi import mysql:index/user:User example user@host
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['UserAadIdentityArgs']] aad_identity: Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.
        :param pulumi.Input[str] auth_plugin: Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.
        :param pulumi.Input[str] auth_string_hashed: Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.
        :param pulumi.Input[str] host: The source host of the user. Defaults to "localhost".
        :param pulumi.Input[str] password: Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.
        :param pulumi.Input[str] plaintext_password: The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.
        :param pulumi.Input[bool] retain_old_password: When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.
        :param pulumi.Input[str] tls_option: An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.
               
               [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
        :param pulumi.Input[str] user: The name of the user.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The ``User`` resource creates and manages a user on a MySQL
        server.

        > **Note:** The password for the user is provided in plain text, and is
        obscured by an unsalted hash in the state
        Read more about sensitive data in state.
        Care is required when using this resource, to avoid disclosing the password.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        jdoe = mysql.User("jdoe",
            host="example.com",
            plaintext_password="password",
            user="jdoe")
        ```
        <!--End PulumiCodeChooser -->

        ### With An Authentication Plugin

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        nologin = mysql.User("nologin",
            auth_plugin="mysql_no_login",
            host="example.com",
            user="nologin")
        ```
        <!--End PulumiCodeChooser -->

        ### With An Authentication Plugin And Hashed Password

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        nologin = mysql.User("nologin",
            auth_plugin="mysql_native_password",
            auth_string_hashed="*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19",
            host="example.com",
            user="nologin")
        ```
        <!--End PulumiCodeChooser -->

        ### With AzureAD Authentication Plugin

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        aadupn = mysql.User("aadupn",
            aad_identity=mysql.UserAadIdentityArgs(
                identity="little.johny@doe.onmicrosoft.com",
                type="user",
            ),
            auth_plugin="aad_auth",
            user="aliasToUseWhenConnectiong")
        ```
        <!--End PulumiCodeChooser -->

        > **Note on Azure Database for MySQL Single Server resource:** If you want to use this for `service_principal` with older Azure Database for MySQL Single Server resource, you need to set param `aad_auth_validate_oids_in_tenant` to `OFF` in provider configuration. For more details see this issue.

        ## Import

        Users can be imported using user and host.

        ```sh
        $ pulumi import mysql:index/user:User example user@host
        ```

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aad_identity: Optional[pulumi.Input[pulumi.InputType['UserAadIdentityArgs']]] = None,
                 auth_plugin: Optional[pulumi.Input[str]] = None,
                 auth_string_hashed: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 plaintext_password: Optional[pulumi.Input[str]] = None,
                 retain_old_password: Optional[pulumi.Input[bool]] = None,
                 tls_option: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            __props__.__dict__["aad_identity"] = aad_identity
            __props__.__dict__["auth_plugin"] = auth_plugin
            __props__.__dict__["auth_string_hashed"] = None if auth_string_hashed is None else pulumi.Output.secret(auth_string_hashed)
            __props__.__dict__["host"] = host
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["plaintext_password"] = None if plaintext_password is None else pulumi.Output.secret(plaintext_password)
            __props__.__dict__["retain_old_password"] = retain_old_password
            __props__.__dict__["tls_option"] = tls_option
            if user is None and not opts.urn:
                raise TypeError("Missing required property 'user'")
            __props__.__dict__["user"] = user
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authStringHashed", "password", "plaintextPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(User, __self__).__init__(
            'mysql:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aad_identity: Optional[pulumi.Input[pulumi.InputType['UserAadIdentityArgs']]] = None,
            auth_plugin: Optional[pulumi.Input[str]] = None,
            auth_string_hashed: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            plaintext_password: Optional[pulumi.Input[str]] = None,
            retain_old_password: Optional[pulumi.Input[bool]] = None,
            tls_option: Optional[pulumi.Input[str]] = None,
            user: Optional[pulumi.Input[str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['UserAadIdentityArgs']] aad_identity: Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.
        :param pulumi.Input[str] auth_plugin: Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.
        :param pulumi.Input[str] auth_string_hashed: Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.
        :param pulumi.Input[str] host: The source host of the user. Defaults to "localhost".
        :param pulumi.Input[str] password: Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.
        :param pulumi.Input[str] plaintext_password: The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.
        :param pulumi.Input[bool] retain_old_password: When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.
        :param pulumi.Input[str] tls_option: An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.
               
               [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
        :param pulumi.Input[str] user: The name of the user.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["aad_identity"] = aad_identity
        __props__.__dict__["auth_plugin"] = auth_plugin
        __props__.__dict__["auth_string_hashed"] = auth_string_hashed
        __props__.__dict__["host"] = host
        __props__.__dict__["password"] = password
        __props__.__dict__["plaintext_password"] = plaintext_password
        __props__.__dict__["retain_old_password"] = retain_old_password
        __props__.__dict__["tls_option"] = tls_option
        __props__.__dict__["user"] = user
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aadIdentity")
    def aad_identity(self) -> pulumi.Output[Optional['outputs.UserAadIdentity']]:
        """
        Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.
        """
        return pulumi.get(self, "aad_identity")

    @property
    @pulumi.getter(name="authPlugin")
    def auth_plugin(self) -> pulumi.Output[Optional[str]]:
        """
        Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.
        """
        return pulumi.get(self, "auth_plugin")

    @property
    @pulumi.getter(name="authStringHashed")
    def auth_string_hashed(self) -> pulumi.Output[Optional[str]]:
        """
        Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.
        """
        return pulumi.get(self, "auth_string_hashed")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[str]]:
        """
        The source host of the user. Defaults to "localhost".
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.
        """
        warnings.warn("""Please use plaintext_password instead""", DeprecationWarning)
        pulumi.log.warn("""password is deprecated: Please use plaintext_password instead""")

        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="plaintextPassword")
    def plaintext_password(self) -> pulumi.Output[Optional[str]]:
        """
        The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.
        """
        return pulumi.get(self, "plaintext_password")

    @property
    @pulumi.getter(name="retainOldPassword")
    def retain_old_password(self) -> pulumi.Output[Optional[bool]]:
        """
        When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.
        """
        return pulumi.get(self, "retain_old_password")

    @property
    @pulumi.getter(name="tlsOption")
    def tls_option(self) -> pulumi.Output[Optional[str]]:
        """
        An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.

        [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
        """
        return pulumi.get(self, "tls_option")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[str]:
        """
        The name of the user.
        """
        return pulumi.get(self, "user")

