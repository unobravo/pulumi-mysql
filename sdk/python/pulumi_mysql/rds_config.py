# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RdsConfigArgs', 'RdsConfig']

@pulumi.input_type
class RdsConfigArgs:
    def __init__(__self__, *,
                 binlog_retention_hours: Optional[pulumi.Input[int]] = None,
                 replication_target_delay: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a RdsConfig resource.
        :param pulumi.Input[int] binlog_retention_hours: binlog retention period in hours
        :param pulumi.Input[int] replication_target_delay: replicaation target delay in seconds
               
               [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
        """
        if binlog_retention_hours is not None:
            pulumi.set(__self__, "binlog_retention_hours", binlog_retention_hours)
        if replication_target_delay is not None:
            pulumi.set(__self__, "replication_target_delay", replication_target_delay)

    @property
    @pulumi.getter(name="binlogRetentionHours")
    def binlog_retention_hours(self) -> Optional[pulumi.Input[int]]:
        """
        binlog retention period in hours
        """
        return pulumi.get(self, "binlog_retention_hours")

    @binlog_retention_hours.setter
    def binlog_retention_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "binlog_retention_hours", value)

    @property
    @pulumi.getter(name="replicationTargetDelay")
    def replication_target_delay(self) -> Optional[pulumi.Input[int]]:
        """
        replicaation target delay in seconds

        [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
        """
        return pulumi.get(self, "replication_target_delay")

    @replication_target_delay.setter
    def replication_target_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_target_delay", value)


@pulumi.input_type
class _RdsConfigState:
    def __init__(__self__, *,
                 binlog_retention_hours: Optional[pulumi.Input[int]] = None,
                 replication_target_delay: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering RdsConfig resources.
        :param pulumi.Input[int] binlog_retention_hours: binlog retention period in hours
        :param pulumi.Input[int] replication_target_delay: replicaation target delay in seconds
               
               [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
        """
        if binlog_retention_hours is not None:
            pulumi.set(__self__, "binlog_retention_hours", binlog_retention_hours)
        if replication_target_delay is not None:
            pulumi.set(__self__, "replication_target_delay", replication_target_delay)

    @property
    @pulumi.getter(name="binlogRetentionHours")
    def binlog_retention_hours(self) -> Optional[pulumi.Input[int]]:
        """
        binlog retention period in hours
        """
        return pulumi.get(self, "binlog_retention_hours")

    @binlog_retention_hours.setter
    def binlog_retention_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "binlog_retention_hours", value)

    @property
    @pulumi.getter(name="replicationTargetDelay")
    def replication_target_delay(self) -> Optional[pulumi.Input[int]]:
        """
        replicaation target delay in seconds

        [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
        """
        return pulumi.get(self, "replication_target_delay")

    @replication_target_delay.setter
    def replication_target_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_target_delay", value)


class RdsConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 binlog_retention_hours: Optional[pulumi.Input[int]] = None,
                 replication_target_delay: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        The ``RdsConfig`` resource manages two configurations supported by AWS RDS MySQL
        server.

        > **Note:** This resource only works with AMAZON RDS MySQL.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        this = mysql.RdsConfig("this",
            binlog_retention_hours=48,
            replication_target_delay=3200)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        RDS config can be imported with any ID name

        Example Usage:

        ```sh
        $ pulumi import mysql:index/rdsConfig:RdsConfig <tf_name> <any random ID>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] binlog_retention_hours: binlog retention period in hours
        :param pulumi.Input[int] replication_target_delay: replicaation target delay in seconds
               
               [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RdsConfigArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The ``RdsConfig`` resource manages two configurations supported by AWS RDS MySQL
        server.

        > **Note:** This resource only works with AMAZON RDS MySQL.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        this = mysql.RdsConfig("this",
            binlog_retention_hours=48,
            replication_target_delay=3200)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        RDS config can be imported with any ID name

        Example Usage:

        ```sh
        $ pulumi import mysql:index/rdsConfig:RdsConfig <tf_name> <any random ID>
        ```

        :param str resource_name: The name of the resource.
        :param RdsConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RdsConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 binlog_retention_hours: Optional[pulumi.Input[int]] = None,
                 replication_target_delay: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RdsConfigArgs.__new__(RdsConfigArgs)

            __props__.__dict__["binlog_retention_hours"] = binlog_retention_hours
            __props__.__dict__["replication_target_delay"] = replication_target_delay
        super(RdsConfig, __self__).__init__(
            'mysql:index/rdsConfig:RdsConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            binlog_retention_hours: Optional[pulumi.Input[int]] = None,
            replication_target_delay: Optional[pulumi.Input[int]] = None) -> 'RdsConfig':
        """
        Get an existing RdsConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] binlog_retention_hours: binlog retention period in hours
        :param pulumi.Input[int] replication_target_delay: replicaation target delay in seconds
               
               [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RdsConfigState.__new__(_RdsConfigState)

        __props__.__dict__["binlog_retention_hours"] = binlog_retention_hours
        __props__.__dict__["replication_target_delay"] = replication_target_delay
        return RdsConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="binlogRetentionHours")
    def binlog_retention_hours(self) -> pulumi.Output[Optional[int]]:
        """
        binlog retention period in hours
        """
        return pulumi.get(self, "binlog_retention_hours")

    @property
    @pulumi.getter(name="replicationTargetDelay")
    def replication_target_delay(self) -> pulumi.Output[Optional[int]]:
        """
        replicaation target delay in seconds

        [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)
        """
        return pulumi.get(self, "replication_target_delay")

