# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DefaultRolesArgs', 'DefaultRoles']

@pulumi.input_type
class DefaultRolesArgs:
    def __init__(__self__, *,
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 user: pulumi.Input[str],
                 host: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DefaultRoles resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: A list of default roles to assign to the user. By default no roles are assigned.
               
               > **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.
        :param pulumi.Input[str] user: The name of the user.
        :param pulumi.Input[str] host: The source host of the user. Defaults to "localhost".
        """
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "user", user)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of default roles to assign to the user. By default no roles are assigned.

        > **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        The name of the user.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The source host of the user. Defaults to "localhost".
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class _DefaultRolesState:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DefaultRoles resources.
        :param pulumi.Input[str] host: The source host of the user. Defaults to "localhost".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: A list of default roles to assign to the user. By default no roles are assigned.
               
               > **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.
        :param pulumi.Input[str] user: The name of the user.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The source host of the user. Defaults to "localhost".
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of default roles to assign to the user. By default no roles are assigned.

        > **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the user.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


class DefaultRoles(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The ``DefaultRoles`` resource creates and manages a user's default roles on a MySQL server.

        > **Note:** This resource is available on MySQL version 8.0.0 and later.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        readonly = mysql.Role("readonly")
        jdoe_user = mysql.User("jdoeUser",
            user="jdoe",
            host="%")
        jdoe_grant = mysql.Grant("jdoeGrant",
            user=jdoe_user.user,
            host=jdoe_user.host,
            database="",
            roles=[readonly.name])
        jdoe_default_roles = mysql.DefaultRoles("jdoeDefaultRoles",
            user=jdoe_user.user,
            host=jdoe_user.host,
            roles=jdoe_grant.roles)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User default roles can be imported using user and host.

        ```sh
        $ pulumi import mysql:index/defaultRoles:DefaultRoles example user@host
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] host: The source host of the user. Defaults to "localhost".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: A list of default roles to assign to the user. By default no roles are assigned.
               
               > **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.
        :param pulumi.Input[str] user: The name of the user.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DefaultRolesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The ``DefaultRoles`` resource creates and manages a user's default roles on a MySQL server.

        > **Note:** This resource is available on MySQL version 8.0.0 and later.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_mysql as mysql

        readonly = mysql.Role("readonly")
        jdoe_user = mysql.User("jdoeUser",
            user="jdoe",
            host="%")
        jdoe_grant = mysql.Grant("jdoeGrant",
            user=jdoe_user.user,
            host=jdoe_user.host,
            database="",
            roles=[readonly.name])
        jdoe_default_roles = mysql.DefaultRoles("jdoeDefaultRoles",
            user=jdoe_user.user,
            host=jdoe_user.host,
            roles=jdoe_grant.roles)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User default roles can be imported using user and host.

        ```sh
        $ pulumi import mysql:index/defaultRoles:DefaultRoles example user@host
        ```

        :param str resource_name: The name of the resource.
        :param DefaultRolesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DefaultRolesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DefaultRolesArgs.__new__(DefaultRolesArgs)

            __props__.__dict__["host"] = host
            if roles is None and not opts.urn:
                raise TypeError("Missing required property 'roles'")
            __props__.__dict__["roles"] = roles
            if user is None and not opts.urn:
                raise TypeError("Missing required property 'user'")
            __props__.__dict__["user"] = user
        super(DefaultRoles, __self__).__init__(
            'mysql:index/defaultRoles:DefaultRoles',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            host: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            user: Optional[pulumi.Input[str]] = None) -> 'DefaultRoles':
        """
        Get an existing DefaultRoles resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] host: The source host of the user. Defaults to "localhost".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: A list of default roles to assign to the user. By default no roles are assigned.
               
               > **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.
        :param pulumi.Input[str] user: The name of the user.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DefaultRolesState.__new__(_DefaultRolesState)

        __props__.__dict__["host"] = host
        __props__.__dict__["roles"] = roles
        __props__.__dict__["user"] = user
        return DefaultRoles(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[str]]:
        """
        The source host of the user. Defaults to "localhost".
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of default roles to assign to the user. By default no roles are assigned.

        > **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[str]:
        """
        The name of the user.
        """
        return pulumi.get(self, "user")

