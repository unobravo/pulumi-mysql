# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SqlArgs', 'Sql']

@pulumi.input_type
class SqlArgs:
    def __init__(__self__, *,
                 create_sql: pulumi.Input[str],
                 delete_sql: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Sql resource.
        """
        pulumi.set(__self__, "create_sql", create_sql)
        pulumi.set(__self__, "delete_sql", delete_sql)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createSql")
    def create_sql(self) -> pulumi.Input[str]:
        return pulumi.get(self, "create_sql")

    @create_sql.setter
    def create_sql(self, value: pulumi.Input[str]):
        pulumi.set(self, "create_sql", value)

    @property
    @pulumi.getter(name="deleteSql")
    def delete_sql(self) -> pulumi.Input[str]:
        return pulumi.get(self, "delete_sql")

    @delete_sql.setter
    def delete_sql(self, value: pulumi.Input[str]):
        pulumi.set(self, "delete_sql", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _SqlState:
    def __init__(__self__, *,
                 create_sql: Optional[pulumi.Input[str]] = None,
                 delete_sql: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Sql resources.
        """
        if create_sql is not None:
            pulumi.set(__self__, "create_sql", create_sql)
        if delete_sql is not None:
            pulumi.set(__self__, "delete_sql", delete_sql)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createSql")
    def create_sql(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_sql")

    @create_sql.setter
    def create_sql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_sql", value)

    @property
    @pulumi.getter(name="deleteSql")
    def delete_sql(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delete_sql")

    @delete_sql.setter
    def delete_sql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_sql", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class Sql(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 create_sql: Optional[pulumi.Input[str]] = None,
                 delete_sql: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Sql resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SqlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Sql resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SqlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SqlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 create_sql: Optional[pulumi.Input[str]] = None,
                 delete_sql: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SqlArgs.__new__(SqlArgs)

            if create_sql is None and not opts.urn:
                raise TypeError("Missing required property 'create_sql'")
            __props__.__dict__["create_sql"] = create_sql
            if delete_sql is None and not opts.urn:
                raise TypeError("Missing required property 'delete_sql'")
            __props__.__dict__["delete_sql"] = delete_sql
            __props__.__dict__["name"] = name
        super(Sql, __self__).__init__(
            'mysql:index/sql:Sql',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_sql: Optional[pulumi.Input[str]] = None,
            delete_sql: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'Sql':
        """
        Get an existing Sql resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SqlState.__new__(_SqlState)

        __props__.__dict__["create_sql"] = create_sql
        __props__.__dict__["delete_sql"] = delete_sql
        __props__.__dict__["name"] = name
        return Sql(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createSql")
    def create_sql(self) -> pulumi.Output[str]:
        return pulumi.get(self, "create_sql")

    @property
    @pulumi.getter(name="deleteSql")
    def delete_sql(self) -> pulumi.Output[str]:
        return pulumi.get(self, "delete_sql")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

