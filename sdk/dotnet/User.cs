// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mysql
{
    /// <summary>
    /// The ``mysql.User`` resource creates and manages a user on a MySQL
    /// server.
    /// 
    /// &gt; **Note:** The password for the user is provided in plain text, and is
    /// obscured by an unsalted hash in the state
    /// Read more about sensitive data in state.
    /// Care is required when using this resource, to avoid disclosing the password.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mysql = Pulumi.Mysql;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var jdoe = new Mysql.User("jdoe", new()
    ///     {
    ///         Host = "example.com",
    ///         PlaintextPassword = "password",
    ///         Username = "jdoe",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### With An Authentication Plugin
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mysql = Pulumi.Mysql;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var nologin = new Mysql.User("nologin", new()
    ///     {
    ///         AuthPlugin = "mysql_no_login",
    ///         Host = "example.com",
    ///         Username = "nologin",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### With An Authentication Plugin And Hashed Password
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mysql = Pulumi.Mysql;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var nologin = new Mysql.User("nologin", new()
    ///     {
    ///         AuthPlugin = "mysql_native_password",
    ///         AuthStringHashed = "*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19",
    ///         Host = "example.com",
    ///         Username = "nologin",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### With AzureAD Authentication Plugin
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mysql = Pulumi.Mysql;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var aadupn = new Mysql.User("aadupn", new()
    ///     {
    ///         AadIdentity = new Mysql.Inputs.UserAadIdentityArgs
    ///         {
    ///             Identity = "little.johny@doe.onmicrosoft.com",
    ///             Type = "user",
    ///         },
    ///         AuthPlugin = "aad_auth",
    ///         Username = "aliasToUseWhenConnectiong",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// &gt; **Note on Azure Database for MySQL Single Server resource:** If you want to use this for `service_principal` with older Azure Database for MySQL Single Server resource, you need to set param `aad_auth_validate_oids_in_tenant` to `OFF` in provider configuration. For more details see this issue.
    /// 
    /// ## Import
    /// 
    /// Users can be imported using user and host.
    /// 
    /// ```sh
    /// $ pulumi import mysql:index/user:User example user@host
    /// ```
    /// </summary>
    [MysqlResourceType("mysql:index/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.
        /// </summary>
        [Output("aadIdentity")]
        public Output<Outputs.UserAadIdentity?> AadIdentity { get; private set; } = null!;

        /// <summary>
        /// Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.
        /// </summary>
        [Output("authPlugin")]
        public Output<string?> AuthPlugin { get; private set; } = null!;

        /// <summary>
        /// Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.
        /// </summary>
        [Output("authStringHashed")]
        public Output<string?> AuthStringHashed { get; private set; } = null!;

        /// <summary>
        /// The source host of the user. Defaults to "localhost".
        /// </summary>
        [Output("host")]
        public Output<string?> Host { get; private set; } = null!;

        /// <summary>
        /// Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.
        /// </summary>
        [Output("plaintextPassword")]
        public Output<string?> PlaintextPassword { get; private set; } = null!;

        /// <summary>
        /// When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.
        /// </summary>
        [Output("retainOldPassword")]
        public Output<bool?> RetainOldPassword { get; private set; } = null!;

        /// <summary>
        /// An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.
        /// 
        /// [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
        /// </summary>
        [Output("tlsOption")]
        public Output<string?> TlsOption { get; private set; } = null!;

        /// <summary>
        /// The name of the user.
        /// </summary>
        [Output("user")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("mysql:index/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("mysql:index/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "authStringHashed",
                    "password",
                    "plaintextPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.
        /// </summary>
        [Input("aadIdentity")]
        public Input<Inputs.UserAadIdentityArgs>? AadIdentity { get; set; }

        /// <summary>
        /// Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.
        /// </summary>
        [Input("authPlugin")]
        public Input<string>? AuthPlugin { get; set; }

        [Input("authStringHashed")]
        private Input<string>? _authStringHashed;

        /// <summary>
        /// Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.
        /// </summary>
        public Input<string>? AuthStringHashed
        {
            get => _authStringHashed;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authStringHashed = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The source host of the user. Defaults to "localhost".
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.
        /// </summary>
        [Obsolete(@"Please use plaintext_password instead")]
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("plaintextPassword")]
        private Input<string>? _plaintextPassword;

        /// <summary>
        /// The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.
        /// </summary>
        public Input<string>? PlaintextPassword
        {
            get => _plaintextPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _plaintextPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.
        /// </summary>
        [Input("retainOldPassword")]
        public Input<bool>? RetainOldPassword { get; set; }

        /// <summary>
        /// An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.
        /// 
        /// [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
        /// </summary>
        [Input("tlsOption")]
        public Input<string>? TlsOption { get; set; }

        /// <summary>
        /// The name of the user.
        /// </summary>
        [Input("user", required: true)]
        public Input<string> Username { get; set; } = null!;

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.
        /// </summary>
        [Input("aadIdentity")]
        public Input<Inputs.UserAadIdentityGetArgs>? AadIdentity { get; set; }

        /// <summary>
        /// Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.
        /// </summary>
        [Input("authPlugin")]
        public Input<string>? AuthPlugin { get; set; }

        [Input("authStringHashed")]
        private Input<string>? _authStringHashed;

        /// <summary>
        /// Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.
        /// </summary>
        public Input<string>? AuthStringHashed
        {
            get => _authStringHashed;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authStringHashed = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The source host of the user. Defaults to "localhost".
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.
        /// </summary>
        [Obsolete(@"Please use plaintext_password instead")]
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("plaintextPassword")]
        private Input<string>? _plaintextPassword;

        /// <summary>
        /// The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.
        /// </summary>
        public Input<string>? PlaintextPassword
        {
            get => _plaintextPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _plaintextPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.
        /// </summary>
        [Input("retainOldPassword")]
        public Input<bool>? RetainOldPassword { get; set; }

        /// <summary>
        /// An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.
        /// 
        /// [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
        /// </summary>
        [Input("tlsOption")]
        public Input<string>? TlsOption { get; set; }

        /// <summary>
        /// The name of the user.
        /// </summary>
        [Input("user")]
        public Input<string>? Username { get; set; }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
