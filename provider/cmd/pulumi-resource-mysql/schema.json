{
    "name": "mysql",
    "description": "A Pulumi package for creating and managing mysql cloud resources.",
    "keywords": [
        "unobravo",
        "mysql",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`mysql` Terraform Provider](https://github.com/petoju/terraform-provider-mysql).",
    "repository": "https://github.com/unobravo/pulumi-mysql",
    "pluginDownloadURL": "github://api.github.com/unobravo/pulumi-mysql",
    "publisher": "unobravo",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/unobravo/pulumi-mysql/sdk/go/mysql",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@unobravo/pulumi-mysql",
            "packageDescription": "A Pulumi package for creating and managing mysql cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/petoju/terraform-provider-mysql)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-mysql` repo](https://github.com/unobravo/pulumi-mysql/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-mysql` repo](https://github.com/petoju/terraform-provider-mysql/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/petoju/terraform-provider-mysql)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-mysql` repo](https://github.com/unobravo/pulumi-mysql/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-mysql` repo](https://github.com/petoju/terraform-provider-mysql/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "authenticationPlugin": {
                "type": "string"
            },
            "awsConfigs": {
                "type": "array",
                "items": {
                    "$ref": "#/types/mysql:config/awsConfigs:awsConfigs"
                }
            },
            "azureConfigs": {
                "type": "array",
                "items": {
                    "$ref": "#/types/mysql:config/azureConfigs:azureConfigs"
                }
            },
            "connParams": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                }
            },
            "connectRetryTimeoutSec": {
                "type": "integer"
            },
            "customTls": {
                "type": "array",
                "items": {
                    "$ref": "#/types/mysql:config/customTls:customTls"
                }
            },
            "endpoint": {
                "type": "string"
            },
            "iamDatabaseAuthentication": {
                "type": "boolean"
            },
            "maxConnLifetimeSec": {
                "type": "integer"
            },
            "maxOpenConns": {
                "type": "integer"
            },
            "password": {
                "type": "string"
            },
            "privateIp": {
                "type": "boolean"
            },
            "proxy": {
                "type": "string"
            },
            "tls": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "defaults": [
            "endpoint",
            "username"
        ]
    },
    "types": {
        "mysql:config/awsConfigs:awsConfigs": {
            "properties": {
                "accessKey": {
                    "type": "string"
                },
                "profile": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "mysql:config/azureConfigs:azureConfigs": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "mysql:config/customTls:customTls": {
            "properties": {
                "caCert": {
                    "type": "string"
                },
                "clientCert": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "configKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCert",
                "clientCert",
                "clientKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mysql:index/ProviderAwsConfig:ProviderAwsConfig": {
            "properties": {
                "accessKey": {
                    "type": "string"
                },
                "profile": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "mysql:index/ProviderAzureConfig:ProviderAzureConfig": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "mysql:index/ProviderCustomTl:ProviderCustomTl": {
            "properties": {
                "caCert": {
                    "type": "string"
                },
                "clientCert": {
                    "type": "string"
                },
                "clientKey": {
                    "type": "string"
                },
                "configKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCert",
                "clientCert",
                "clientKey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        },
        "mysql:index/UserAadIdentity:UserAadIdentity": {
            "properties": {
                "identity": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "identity"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the mysql package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "authenticationPlugin": {
                "type": "string"
            },
            "awsConfigs": {
                "type": "array",
                "items": {
                    "$ref": "#/types/mysql:index/ProviderAwsConfig:ProviderAwsConfig"
                }
            },
            "azureConfigs": {
                "type": "array",
                "items": {
                    "$ref": "#/types/mysql:index/ProviderAzureConfig:ProviderAzureConfig"
                }
            },
            "connParams": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                }
            },
            "connectRetryTimeoutSec": {
                "type": "integer"
            },
            "customTls": {
                "type": "array",
                "items": {
                    "$ref": "#/types/mysql:index/ProviderCustomTl:ProviderCustomTl"
                }
            },
            "endpoint": {
                "type": "string"
            },
            "iamDatabaseAuthentication": {
                "type": "boolean"
            },
            "maxConnLifetimeSec": {
                "type": "integer"
            },
            "maxOpenConns": {
                "type": "integer"
            },
            "password": {
                "type": "string"
            },
            "privateIp": {
                "type": "boolean"
            },
            "proxy": {
                "type": "string"
            },
            "tls": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "required": [
            "endpoint",
            "username"
        ],
        "inputProperties": {
            "authenticationPlugin": {
                "type": "string"
            },
            "awsConfigs": {
                "type": "array",
                "items": {
                    "$ref": "#/types/mysql:index/ProviderAwsConfig:ProviderAwsConfig"
                }
            },
            "azureConfigs": {
                "type": "array",
                "items": {
                    "$ref": "#/types/mysql:index/ProviderAzureConfig:ProviderAzureConfig"
                }
            },
            "connParams": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                }
            },
            "connectRetryTimeoutSec": {
                "type": "integer"
            },
            "customTls": {
                "type": "array",
                "items": {
                    "$ref": "#/types/mysql:index/ProviderCustomTl:ProviderCustomTl"
                }
            },
            "endpoint": {
                "type": "string"
            },
            "iamDatabaseAuthentication": {
                "type": "boolean"
            },
            "maxConnLifetimeSec": {
                "type": "integer"
            },
            "maxOpenConns": {
                "type": "integer"
            },
            "password": {
                "type": "string"
            },
            "privateIp": {
                "type": "boolean"
            },
            "proxy": {
                "type": "string"
            },
            "tls": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "endpoint",
            "username"
        ]
    },
    "resources": {
        "mysql:index/database:Database": {
            "description": "The ``mysql.Database`` resource creates and manages a database on a MySQL\nserver.\n\n\u003e **Caution:** The ``mysql.Database`` resource can completely delete your\ndatabase just as easily as it can create it. To avoid costly accidents,\nconsider setting\n[``prevent_destroy``](https://www.terraform.io/docs/configuration/resources.html#prevent_destroy)\non your database resources as an extra safety measure.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst app = new mysql.Database(\"app\", {});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\napp = mysql.Database(\"app\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = new Mysql.Database(\"app\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewDatabase(ctx, \"app\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.Database;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var app = new Database(\"app\");\n\n    }\n}\n```\n```yaml\nresources:\n  app:\n    type: mysql:Database\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDatabases can be imported using their name, e.g.\n\n```sh\n$ pulumi import mysql:index/database:Database example my-example-database\n```\n",
            "properties": {
                "defaultCharacterSet": {
                    "type": "string",
                    "description": "The default character set to use when\na table is created without specifying an explicit character set. Defaults\nto ``utf8mb4``.\n"
                },
                "defaultCollation": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database. This must be unique within\na given MySQL server and may or may not be case-sensitive depending on\nthe operating system on which the MySQL server is running.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "defaultCharacterSet": {
                    "type": "string",
                    "description": "The default character set to use when\na table is created without specifying an explicit character set. Defaults\nto ``utf8mb4``.\n"
                },
                "defaultCollation": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database. This must be unique within\na given MySQL server and may or may not be case-sensitive depending on\nthe operating system on which the MySQL server is running.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "defaultCharacterSet": {
                        "type": "string",
                        "description": "The default character set to use when\na table is created without specifying an explicit character set. Defaults\nto ``utf8mb4``.\n"
                    },
                    "defaultCollation": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database. This must be unique within\na given MySQL server and may or may not be case-sensitive depending on\nthe operating system on which the MySQL server is running.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/defaultRoles:DefaultRoles": {
            "description": "The ``mysql.DefaultRoles`` resource creates and manages a user's default roles on a MySQL server.\n\n\u003e **Note:** This resource is available on MySQL version 8.0.0 and later.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst readonly = new mysql.Role(\"readonly\", {});\nconst jdoeUser = new mysql.User(\"jdoeUser\", {\n    user: \"jdoe\",\n    host: \"%\",\n});\nconst jdoeGrant = new mysql.Grant(\"jdoeGrant\", {\n    user: jdoeUser.user,\n    host: jdoeUser.host,\n    database: \"\",\n    roles: [readonly.name],\n});\nconst jdoeDefaultRoles = new mysql.DefaultRoles(\"jdoeDefaultRoles\", {\n    user: jdoeUser.user,\n    host: jdoeUser.host,\n    roles: jdoeGrant.roles,\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nreadonly = mysql.Role(\"readonly\")\njdoe_user = mysql.User(\"jdoeUser\",\n    user=\"jdoe\",\n    host=\"%\")\njdoe_grant = mysql.Grant(\"jdoeGrant\",\n    user=jdoe_user.user,\n    host=jdoe_user.host,\n    database=\"\",\n    roles=[readonly.name])\njdoe_default_roles = mysql.DefaultRoles(\"jdoeDefaultRoles\",\n    user=jdoe_user.user,\n    host=jdoe_user.host,\n    roles=jdoe_grant.roles)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @readonly = new Mysql.Role(\"readonly\");\n\n    var jdoeUser = new Mysql.User(\"jdoeUser\", new()\n    {\n        Username = \"jdoe\",\n        Host = \"%\",\n    });\n\n    var jdoeGrant = new Mysql.Grant(\"jdoeGrant\", new()\n    {\n        User = jdoeUser.Username,\n        Host = jdoeUser.Host,\n        Database = \"\",\n        Roles = new[]\n        {\n            @readonly.Name,\n        },\n    });\n\n    var jdoeDefaultRoles = new Mysql.DefaultRoles(\"jdoeDefaultRoles\", new()\n    {\n        User = jdoeUser.Username,\n        Host = jdoeUser.Host,\n        Roles = jdoeGrant.Roles,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treadonly, err := mysql.NewRole(ctx, \"readonly\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjdoeUser, err := mysql.NewUser(ctx, \"jdoeUser\", \u0026mysql.UserArgs{\n\t\t\tUser: pulumi.String(\"jdoe\"),\n\t\t\tHost: pulumi.String(\"%\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjdoeGrant, err := mysql.NewGrant(ctx, \"jdoeGrant\", \u0026mysql.GrantArgs{\n\t\t\tUser:     jdoeUser.User,\n\t\t\tHost:     jdoeUser.Host,\n\t\t\tDatabase: pulumi.String(\"\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\treadonly.Name,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = mysql.NewDefaultRoles(ctx, \"jdoeDefaultRoles\", \u0026mysql.DefaultRolesArgs{\n\t\t\tUser:  jdoeUser.User,\n\t\t\tHost:  jdoeUser.Host,\n\t\t\tRoles: jdoeGrant.Roles,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.Role;\nimport com.pulumi.mysql.User;\nimport com.pulumi.mysql.UserArgs;\nimport com.pulumi.mysql.Grant;\nimport com.pulumi.mysql.GrantArgs;\nimport com.pulumi.mysql.DefaultRoles;\nimport com.pulumi.mysql.DefaultRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var readonly = new Role(\"readonly\");\n\n        var jdoeUser = new User(\"jdoeUser\", UserArgs.builder()        \n            .user(\"jdoe\")\n            .host(\"%\")\n            .build());\n\n        var jdoeGrant = new Grant(\"jdoeGrant\", GrantArgs.builder()        \n            .user(jdoeUser.user())\n            .host(jdoeUser.host())\n            .database(\"\")\n            .roles(readonly.name())\n            .build());\n\n        var jdoeDefaultRoles = new DefaultRoles(\"jdoeDefaultRoles\", DefaultRolesArgs.builder()        \n            .user(jdoeUser.user())\n            .host(jdoeUser.host())\n            .roles(jdoeGrant.roles())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  readonly:\n    type: mysql:Role\n  jdoeUser:\n    type: mysql:User\n    properties:\n      user: jdoe\n      host: '%'\n  jdoeGrant:\n    type: mysql:Grant\n    properties:\n      user: ${jdoeUser.user}\n      host: ${jdoeUser.host}\n      database:\n      roles:\n        - ${readonly.name}\n  jdoeDefaultRoles:\n    type: mysql:DefaultRoles\n    properties:\n      user: ${jdoeUser.user}\n      host: ${jdoeUser.host}\n      roles: ${jdoeGrant.roles}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUser default roles can be imported using user and host.\n\n```sh\n$ pulumi import mysql:index/defaultRoles:DefaultRoles example user@host\n```\n\n",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to \"localhost\".\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of default roles to assign to the user. By default no roles are assigned.\n\n\u003e **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "required": [
                "roles",
                "user"
            ],
            "inputProperties": {
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to \"localhost\".\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of default roles to assign to the user. By default no roles are assigned.\n\n\u003e **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roles",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultRoles resources.\n",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "The source host of the user. Defaults to \"localhost\".\n",
                        "willReplaceOnChanges": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of default roles to assign to the user. By default no roles are assigned.\n\n\u003e **Note:** Creating a new default roles resource on an existing user will **overwrite** the user's existing default roles. Likewise, destryoing a default roles resource will **remove** the user's default roles, equivalent to running `ALTER USER ... DEFAULT ROLE NONE`.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The name of the user.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/globalVariable:GlobalVariable": {
            "description": "The ``mysql.GlobalVariable`` resource manages a global variables on a MySQL\nserver.\n\n\u003e **Note on MySQL:** MySQL global variables are [not persistent](https://dev.mysql.com/doc/refman/5.7/en/set-variable.html)\n\n\u003e **Note on TiDB:** TiDB global variables are [persistent](https://docs.pingcap.com/tidb/v5.4/sql-statement-set-variable#mysql-compatibility)\n\n\u003e **Note about `destroy`:** `destroy` will try assign `DEFAULT` value for global variable.\n  Unfortunately not every variable support this.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst maxConnections = new mysql.GlobalVariable(\"maxConnections\", {value: \"100\"});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nmax_connections = mysql.GlobalVariable(\"maxConnections\", value=\"100\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var maxConnections = new Mysql.GlobalVariable(\"maxConnections\", new()\n    {\n        Value = \"100\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewGlobalVariable(ctx, \"maxConnections\", \u0026mysql.GlobalVariableArgs{\n\t\t\tValue: pulumi.String(\"100\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.GlobalVariable;\nimport com.pulumi.mysql.GlobalVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var maxConnections = new GlobalVariable(\"maxConnections\", GlobalVariableArgs.builder()        \n            .value(\"100\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  maxConnections:\n    type: mysql:GlobalVariable\n    properties:\n      value: '100'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nGlobal variable can be imported using global variable name.\n\n```sh\n$ pulumi import mysql:index/globalVariable:GlobalVariable max_connections max_connections\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the global variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the global variable.\n"
                }
            },
            "required": [
                "name",
                "value"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the global variable.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the global variable.\n"
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GlobalVariable resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the global variable.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the global variable.\n"
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/grant:Grant": {
            "description": "The ``mysql.Grant`` resource creates and manages privileges given to\na user on a MySQL server.\n\n## Granting Privileges to a User\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst jdoeUser = new mysql.User(\"jdoeUser\", {\n    user: \"jdoe\",\n    host: \"example.com\",\n    plaintextPassword: \"password\",\n});\nconst jdoeGrant = new mysql.Grant(\"jdoeGrant\", {\n    user: jdoeUser.user,\n    host: jdoeUser.host,\n    database: \"app\",\n    privileges: [\n        \"SELECT\",\n        \"UPDATE\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\njdoe_user = mysql.User(\"jdoeUser\",\n    user=\"jdoe\",\n    host=\"example.com\",\n    plaintext_password=\"password\")\njdoe_grant = mysql.Grant(\"jdoeGrant\",\n    user=jdoe_user.user,\n    host=jdoe_user.host,\n    database=\"app\",\n    privileges=[\n        \"SELECT\",\n        \"UPDATE\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jdoeUser = new Mysql.User(\"jdoeUser\", new()\n    {\n        Username = \"jdoe\",\n        Host = \"example.com\",\n        PlaintextPassword = \"password\",\n    });\n\n    var jdoeGrant = new Mysql.Grant(\"jdoeGrant\", new()\n    {\n        User = jdoeUser.Username,\n        Host = jdoeUser.Host,\n        Database = \"app\",\n        Privileges = new[]\n        {\n            \"SELECT\",\n            \"UPDATE\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjdoeUser, err := mysql.NewUser(ctx, \"jdoeUser\", \u0026mysql.UserArgs{\n\t\t\tUser:              pulumi.String(\"jdoe\"),\n\t\t\tHost:              pulumi.String(\"example.com\"),\n\t\t\tPlaintextPassword: pulumi.String(\"password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = mysql.NewGrant(ctx, \"jdoeGrant\", \u0026mysql.GrantArgs{\n\t\t\tUser:     jdoeUser.User,\n\t\t\tHost:     jdoeUser.Host,\n\t\t\tDatabase: pulumi.String(\"app\"),\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SELECT\"),\n\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.User;\nimport com.pulumi.mysql.UserArgs;\nimport com.pulumi.mysql.Grant;\nimport com.pulumi.mysql.GrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var jdoeUser = new User(\"jdoeUser\", UserArgs.builder()        \n            .user(\"jdoe\")\n            .host(\"example.com\")\n            .plaintextPassword(\"password\")\n            .build());\n\n        var jdoeGrant = new Grant(\"jdoeGrant\", GrantArgs.builder()        \n            .user(jdoeUser.user())\n            .host(jdoeUser.host())\n            .database(\"app\")\n            .privileges(            \n                \"SELECT\",\n                \"UPDATE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  jdoeUser:\n    type: mysql:User\n    properties:\n      user: jdoe\n      host: example.com\n      plaintextPassword: password\n  jdoeGrant:\n    type: mysql:Grant\n    properties:\n      user: ${jdoeUser.user}\n      host: ${jdoeUser.host}\n      database: app\n      privileges:\n        - SELECT\n        - UPDATE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Granting Privileges to a Role\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst developerRole = new mysql.Role(\"developerRole\", {});\nconst developerGrant = new mysql.Grant(\"developerGrant\", {\n    role: developerRole.name,\n    database: \"app\",\n    privileges: [\n        \"SELECT\",\n        \"UPDATE\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\ndeveloper_role = mysql.Role(\"developerRole\")\ndeveloper_grant = mysql.Grant(\"developerGrant\",\n    role=developer_role.name,\n    database=\"app\",\n    privileges=[\n        \"SELECT\",\n        \"UPDATE\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var developerRole = new Mysql.Role(\"developerRole\");\n\n    var developerGrant = new Mysql.Grant(\"developerGrant\", new()\n    {\n        Role = developerRole.Name,\n        Database = \"app\",\n        Privileges = new[]\n        {\n            \"SELECT\",\n            \"UPDATE\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdeveloperRole, err := mysql.NewRole(ctx, \"developerRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = mysql.NewGrant(ctx, \"developerGrant\", \u0026mysql.GrantArgs{\n\t\t\tRole:     developerRole.Name,\n\t\t\tDatabase: pulumi.String(\"app\"),\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SELECT\"),\n\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.Role;\nimport com.pulumi.mysql.Grant;\nimport com.pulumi.mysql.GrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var developerRole = new Role(\"developerRole\");\n\n        var developerGrant = new Grant(\"developerGrant\", GrantArgs.builder()        \n            .role(developerRole.name())\n            .database(\"app\")\n            .privileges(            \n                \"SELECT\",\n                \"UPDATE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  developerRole:\n    type: mysql:Role\n  developerGrant:\n    type: mysql:Grant\n    properties:\n      role: ${developerRole.name}\n      database: app\n      privileges:\n        - SELECT\n        - UPDATE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Adding a Role to a User\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst jdoe = new mysql.User(\"jdoe\", {\n    user: \"jdoe\",\n    host: \"example.com\",\n    plaintextPassword: \"password\",\n});\nconst developerRole = new mysql.Role(\"developerRole\", {});\nconst developerGrant = new mysql.Grant(\"developerGrant\", {\n    user: jdoe.user,\n    host: jdoe.host,\n    database: \"app\",\n    roles: [developerRole.name],\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\njdoe = mysql.User(\"jdoe\",\n    user=\"jdoe\",\n    host=\"example.com\",\n    plaintext_password=\"password\")\ndeveloper_role = mysql.Role(\"developerRole\")\ndeveloper_grant = mysql.Grant(\"developerGrant\",\n    user=jdoe.user,\n    host=jdoe.host,\n    database=\"app\",\n    roles=[developer_role.name])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jdoe = new Mysql.User(\"jdoe\", new()\n    {\n        Username = \"jdoe\",\n        Host = \"example.com\",\n        PlaintextPassword = \"password\",\n    });\n\n    var developerRole = new Mysql.Role(\"developerRole\");\n\n    var developerGrant = new Mysql.Grant(\"developerGrant\", new()\n    {\n        User = jdoe.Username,\n        Host = jdoe.Host,\n        Database = \"app\",\n        Roles = new[]\n        {\n            developerRole.Name,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjdoe, err := mysql.NewUser(ctx, \"jdoe\", \u0026mysql.UserArgs{\n\t\t\tUser:              pulumi.String(\"jdoe\"),\n\t\t\tHost:              pulumi.String(\"example.com\"),\n\t\t\tPlaintextPassword: pulumi.String(\"password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdeveloperRole, err := mysql.NewRole(ctx, \"developerRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = mysql.NewGrant(ctx, \"developerGrant\", \u0026mysql.GrantArgs{\n\t\t\tUser:     jdoe.User,\n\t\t\tHost:     jdoe.Host,\n\t\t\tDatabase: pulumi.String(\"app\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tdeveloperRole.Name,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.User;\nimport com.pulumi.mysql.UserArgs;\nimport com.pulumi.mysql.Role;\nimport com.pulumi.mysql.Grant;\nimport com.pulumi.mysql.GrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var jdoe = new User(\"jdoe\", UserArgs.builder()        \n            .user(\"jdoe\")\n            .host(\"example.com\")\n            .plaintextPassword(\"password\")\n            .build());\n\n        var developerRole = new Role(\"developerRole\");\n\n        var developerGrant = new Grant(\"developerGrant\", GrantArgs.builder()        \n            .user(jdoe.user())\n            .host(jdoe.host())\n            .database(\"app\")\n            .roles(developerRole.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  jdoe:\n    type: mysql:User\n    properties:\n      user: jdoe\n      host: example.com\n      plaintextPassword: password\n  developerRole:\n    type: mysql:Role\n  developerGrant:\n    type: mysql:Grant\n    properties:\n      user: ${jdoe.user}\n      host: ${jdoe.host}\n      database: app\n      roles:\n        - ${developerRole.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nGrants can be imported using user, host, database and table.\n\nFor grants without explicit database or tables, leave these fields empty.\n\nYou can also add an extra at sign `@` to the import definition to specify\n\nthe grant contains WITH GRANT OPTION.\n\n```sh\n$ pulumi import mysql:index/grant:Grant example user@host@database@table\n```\n\n```sh\n$ pulumi import mysql:index/grant:Grant without_db user@host@@\n```\n\nImport the first example with grant option\n\n```sh\n$ pulumi import mysql:index/grant:Grant example user@host@database@table@\n```\n\n",
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant privileges on.\n"
                },
                "grant": {
                    "type": "boolean",
                    "description": "Whether to also give the user privileges to grant the same privileges to other users.\n",
                    "language": {
                        "csharp": {
                            "name": "CanGrant"
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to \"localhost\". Conflicts with `role`.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to grant `privileges` to. Conflicts with `user` and `host`.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of roles to grant to the user. Conflicts with `privileges`.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Which table to grant `privileges` on. Defaults to `*`, which is all tables.\n"
                },
                "tlsOption": {
                    "type": "string",
                    "description": "An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.\n",
                    "deprecationMessage": "Please use tls_option in mysql_user."
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user. Conflicts with `role`.\n"
                }
            },
            "required": [
                "database"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant privileges on.\n",
                    "willReplaceOnChanges": true
                },
                "grant": {
                    "type": "boolean",
                    "description": "Whether to also give the user privileges to grant the same privileges to other users.\n",
                    "language": {
                        "csharp": {
                            "name": "CanGrant"
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to \"localhost\". Conflicts with `role`.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to grant `privileges` to. Conflicts with `user` and `host`.\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of roles to grant to the user. Conflicts with `privileges`.\n",
                    "willReplaceOnChanges": true
                },
                "table": {
                    "type": "string",
                    "description": "Which table to grant `privileges` on. Defaults to `*`, which is all tables.\n",
                    "willReplaceOnChanges": true
                },
                "tlsOption": {
                    "type": "string",
                    "description": "An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.\n",
                    "deprecationMessage": "Please use tls_option in mysql_user.",
                    "willReplaceOnChanges": true
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user. Conflicts with `role`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "database"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Grant resources.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database to grant privileges on.\n",
                        "willReplaceOnChanges": true
                    },
                    "grant": {
                        "type": "boolean",
                        "description": "Whether to also give the user privileges to grant the same privileges to other users.\n",
                        "language": {
                            "csharp": {
                                "name": "CanGrant"
                            }
                        },
                        "willReplaceOnChanges": true
                    },
                    "host": {
                        "type": "string",
                        "description": "The source host of the user. Defaults to \"localhost\". Conflicts with `role`.\n",
                        "willReplaceOnChanges": true
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role to grant `privileges` to. Conflicts with `user` and `host`.\n",
                        "willReplaceOnChanges": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of roles to grant to the user. Conflicts with `privileges`.\n",
                        "willReplaceOnChanges": true
                    },
                    "table": {
                        "type": "string",
                        "description": "Which table to grant `privileges` on. Defaults to `*`, which is all tables.\n",
                        "willReplaceOnChanges": true
                    },
                    "tlsOption": {
                        "type": "string",
                        "description": "An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.\n",
                        "deprecationMessage": "Please use tls_option in mysql_user.",
                        "willReplaceOnChanges": true
                    },
                    "user": {
                        "type": "string",
                        "description": "The name of the user. Conflicts with `role`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/rdsConfig:RdsConfig": {
            "description": "The ``mysql.RdsConfig`` resource manages two configurations supported by AWS RDS MySQL\nserver.\n\n\u003e **Note:** This resource only works with AMAZON RDS MySQL.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst _this = new mysql.RdsConfig(\"this\", {\n    binlogRetentionHours: 48,\n    replicationTargetDelay: 3200,\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nthis = mysql.RdsConfig(\"this\",\n    binlog_retention_hours=48,\n    replication_target_delay=3200)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Mysql.RdsConfig(\"this\", new()\n    {\n        BinlogRetentionHours = 48,\n        ReplicationTargetDelay = 3200,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewRdsConfig(ctx, \"this\", \u0026mysql.RdsConfigArgs{\n\t\t\tBinlogRetentionHours:   pulumi.Int(48),\n\t\t\tReplicationTargetDelay: pulumi.Int(3200),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.RdsConfig;\nimport com.pulumi.mysql.RdsConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new RdsConfig(\"this\", RdsConfigArgs.builder()        \n            .binlogRetentionHours(48)\n            .replicationTargetDelay(3200)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: mysql:RdsConfig\n    properties:\n      binlogRetentionHours: 48\n      replicationTargetDelay: 3200\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRDS config can be imported with any ID name\n\nExample Usage:\n\n```sh\n$ pulumi import mysql:index/rdsConfig:RdsConfig \u003ctf_name\u003e \u003cany random ID\u003e\n```\n\n",
            "properties": {
                "binlogRetentionHours": {
                    "type": "integer",
                    "description": "binlog retention period in hours\n"
                },
                "replicationTargetDelay": {
                    "type": "integer",
                    "description": "replicaation target delay in seconds\n\n[Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)\n"
                }
            },
            "inputProperties": {
                "binlogRetentionHours": {
                    "type": "integer",
                    "description": "binlog retention period in hours\n"
                },
                "replicationTargetDelay": {
                    "type": "integer",
                    "description": "replicaation target delay in seconds\n\n[Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RdsConfig resources.\n",
                "properties": {
                    "binlogRetentionHours": {
                        "type": "integer",
                        "description": "binlog retention period in hours\n"
                    },
                    "replicationTargetDelay": {
                        "type": "integer",
                        "description": "replicaation target delay in seconds\n\n[Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql_rds_set_configuration.html)\n"
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/role:Role": {
            "description": "The ``mysql.Role`` resource creates and manages a user on a MySQL\nserver.\n\n\u003e **Note:** MySQL introduced roles in version 8. They do not work on MySQL 5 and lower.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst developer = new mysql.Role(\"developer\", {});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\ndeveloper = mysql.Role(\"developer\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var developer = new Mysql.Role(\"developer\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewRole(ctx, \"developer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.Role;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var developer = new Role(\"developer\");\n\n    }\n}\n```\n```yaml\nresources:\n  developer:\n    type: mysql:Role\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the role.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/sql:Sql": {
            "properties": {
                "createSql": {
                    "type": "string"
                },
                "deleteSql": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "createSql",
                "deleteSql",
                "name"
            ],
            "inputProperties": {
                "createSql": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "deleteSql": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "createSql",
                "deleteSql"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Sql resources.\n",
                "properties": {
                    "createSql": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "deleteSql": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/tiConfig:TiConfig": {
            "description": "The ``mysql.TiConfig`` resource manages a TiKV or PD variables on a TiDB cluster.\n\n\u003e **Note on TiDB:** Possible TiKV or PD variables are available [here](https://docs.pingcap.com/tidb/stable/dynamic-config)\n\n\u003e **Note about `destroy`:** `destroy` is trying restore default values as described here.\n  Unfortunately not every variable support this.\n\n## Example Usage\n\n### PD\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst logLevel = new mysql.TiConfig(\"logLevel\", {\n    type: \"pd\",\n    value: \"warn\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nlog_level = mysql.TiConfig(\"logLevel\",\n    type=\"pd\",\n    value=\"warn\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var logLevel = new Mysql.TiConfig(\"logLevel\", new()\n    {\n        Type = \"pd\",\n        Value = \"warn\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewTiConfig(ctx, \"logLevel\", \u0026mysql.TiConfigArgs{\n\t\t\tType:  pulumi.String(\"pd\"),\n\t\t\tValue: pulumi.String(\"warn\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.TiConfig;\nimport com.pulumi.mysql.TiConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var logLevel = new TiConfig(\"logLevel\", TiConfigArgs.builder()        \n            .type(\"pd\")\n            .value(\"warn\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  logLevel:\n    type: mysql:TiConfig\n    properties:\n      type: pd\n      value: warn\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Set variable for all PD instances\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst logLevel = new mysql.TiConfig(\"logLevel\", {\n    type: \"pd\",\n    value: \"warn\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nlog_level = mysql.TiConfig(\"logLevel\",\n    type=\"pd\",\n    value=\"warn\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var logLevel = new Mysql.TiConfig(\"logLevel\", new()\n    {\n        Type = \"pd\",\n        Value = \"warn\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewTiConfig(ctx, \"logLevel\", \u0026mysql.TiConfigArgs{\n\t\t\tType:  pulumi.String(\"pd\"),\n\t\t\tValue: pulumi.String(\"warn\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.TiConfig;\nimport com.pulumi.mysql.TiConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var logLevel = new TiConfig(\"logLevel\", TiConfigArgs.builder()        \n            .type(\"pd\")\n            .value(\"warn\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  logLevel:\n    type: mysql:TiConfig\n    properties:\n      type: pd\n      value: warn\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Set variable for one PD instance only\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst logLevel = new mysql.TiConfig(\"logLevel\", {\n    instance: \"127.0.0.1:2379\",\n    type: \"pd\",\n    value: \"warn\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nlog_level = mysql.TiConfig(\"logLevel\",\n    instance=\"127.0.0.1:2379\",\n    type=\"pd\",\n    value=\"warn\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var logLevel = new Mysql.TiConfig(\"logLevel\", new()\n    {\n        Instance = \"127.0.0.1:2379\",\n        Type = \"pd\",\n        Value = \"warn\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewTiConfig(ctx, \"logLevel\", \u0026mysql.TiConfigArgs{\n\t\t\tInstance: pulumi.String(\"127.0.0.1:2379\"),\n\t\t\tType:     pulumi.String(\"pd\"),\n\t\t\tValue:    pulumi.String(\"warn\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.TiConfig;\nimport com.pulumi.mysql.TiConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var logLevel = new TiConfig(\"logLevel\", TiConfigArgs.builder()        \n            .instance(\"127.0.0.1:2379\")\n            .type(\"pd\")\n            .value(\"warn\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  logLevel:\n    type: mysql:TiConfig\n    properties:\n      instance: 127.0.0.1:2379\n      type: pd\n      value: warn\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## TiKV\n\n### Set varibale for all TiKV instances\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst splitQpsThreshold = new mysql.TiConfig(\"splitQpsThreshold\", {\n    type: \"tikv\",\n    value: \"100\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nsplit_qps_threshold = mysql.TiConfig(\"splitQpsThreshold\",\n    type=\"tikv\",\n    value=\"100\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var splitQpsThreshold = new Mysql.TiConfig(\"splitQpsThreshold\", new()\n    {\n        Type = \"tikv\",\n        Value = \"100\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewTiConfig(ctx, \"splitQpsThreshold\", \u0026mysql.TiConfigArgs{\n\t\t\tType:  pulumi.String(\"tikv\"),\n\t\t\tValue: pulumi.String(\"100\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.TiConfig;\nimport com.pulumi.mysql.TiConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var splitQpsThreshold = new TiConfig(\"splitQpsThreshold\", TiConfigArgs.builder()        \n            .type(\"tikv\")\n            .value(\"100\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  splitQpsThreshold:\n    type: mysql:TiConfig\n    properties:\n      type: tikv\n      value: '100'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n#### Set variable for one TiKV instance only\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst splitQpsThreshold = new mysql.TiConfig(\"splitQpsThreshold\", {\n    instance: \"127.0.0.1:20180\",\n    type: \"tikv\",\n    value: \"10\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nsplit_qps_threshold = mysql.TiConfig(\"splitQpsThreshold\",\n    instance=\"127.0.0.1:20180\",\n    type=\"tikv\",\n    value=\"10\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var splitQpsThreshold = new Mysql.TiConfig(\"splitQpsThreshold\", new()\n    {\n        Instance = \"127.0.0.1:20180\",\n        Type = \"tikv\",\n        Value = \"10\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewTiConfig(ctx, \"splitQpsThreshold\", \u0026mysql.TiConfigArgs{\n\t\t\tInstance: pulumi.String(\"127.0.0.1:20180\"),\n\t\t\tType:     pulumi.String(\"tikv\"),\n\t\t\tValue:    pulumi.String(\"10\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.TiConfig;\nimport com.pulumi.mysql.TiConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var splitQpsThreshold = new TiConfig(\"splitQpsThreshold\", TiConfigArgs.builder()        \n            .instance(\"127.0.0.1:20180\")\n            .type(\"tikv\")\n            .value(\"10\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  splitQpsThreshold:\n    type: mysql:TiConfig\n    properties:\n      instance: 127.0.0.1:20180\n      type: tikv\n      value: '10'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n### Simple example\n\n#### TiKV example\n\n```sh\n$ pulumi import mysql:index/tiConfig:TiConfig split_qps_threshold' 'tikv#split-qps-threshold'\n```\n\nImport value for specific instance\n\n```sh\n$ pulumi import mysql:index/tiConfig:TiConfig split_qps_threshold' 'tikv#split-qps-threshold#127.0.0.1:20180'\n```\n\n#### PD example\n\n```sh\n$ pulumi import mysql:index/tiConfig:TiConfig log_level' 'pd#log.level'\n```\n\n",
            "properties": {
                "instance": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configuration variable.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The instance type to configure. Possible values are tikv or pd.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the configuration variable as string.\n"
                }
            },
            "required": [
                "name",
                "type",
                "value"
            ],
            "inputProperties": {
                "instance": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configuration variable.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The instance type to configure. Possible values are tikv or pd.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the configuration variable as string.\n"
                }
            },
            "requiredInputs": [
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TiConfig resources.\n",
                "properties": {
                    "instance": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the configuration variable.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The instance type to configure. Possible values are tikv or pd.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the configuration variable as string.\n"
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/user:User": {
            "description": "The ``mysql.User`` resource creates and manages a user on a MySQL\nserver.\n\n\u003e **Note:** The password for the user is provided in plain text, and is\nobscured by an unsalted hash in the state\nRead more about sensitive data in state.\nCare is required when using this resource, to avoid disclosing the password.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst jdoe = new mysql.User(\"jdoe\", {\n    host: \"example.com\",\n    plaintextPassword: \"password\",\n    user: \"jdoe\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\njdoe = mysql.User(\"jdoe\",\n    host=\"example.com\",\n    plaintext_password=\"password\",\n    user=\"jdoe\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jdoe = new Mysql.User(\"jdoe\", new()\n    {\n        Host = \"example.com\",\n        PlaintextPassword = \"password\",\n        Username = \"jdoe\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewUser(ctx, \"jdoe\", \u0026mysql.UserArgs{\n\t\t\tHost:              pulumi.String(\"example.com\"),\n\t\t\tPlaintextPassword: pulumi.String(\"password\"),\n\t\t\tUser:              pulumi.String(\"jdoe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.User;\nimport com.pulumi.mysql.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var jdoe = new User(\"jdoe\", UserArgs.builder()        \n            .host(\"example.com\")\n            .plaintextPassword(\"password\")\n            .user(\"jdoe\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  jdoe:\n    type: mysql:User\n    properties:\n      host: example.com\n      plaintextPassword: password\n      user: jdoe\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n### With An Authentication Plugin\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst nologin = new mysql.User(\"nologin\", {\n    authPlugin: \"mysql_no_login\",\n    host: \"example.com\",\n    user: \"nologin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nnologin = mysql.User(\"nologin\",\n    auth_plugin=\"mysql_no_login\",\n    host=\"example.com\",\n    user=\"nologin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nologin = new Mysql.User(\"nologin\", new()\n    {\n        AuthPlugin = \"mysql_no_login\",\n        Host = \"example.com\",\n        Username = \"nologin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewUser(ctx, \"nologin\", \u0026mysql.UserArgs{\n\t\t\tAuthPlugin: pulumi.String(\"mysql_no_login\"),\n\t\t\tHost:       pulumi.String(\"example.com\"),\n\t\t\tUser:       pulumi.String(\"nologin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.User;\nimport com.pulumi.mysql.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nologin = new User(\"nologin\", UserArgs.builder()        \n            .authPlugin(\"mysql_no_login\")\n            .host(\"example.com\")\n            .user(\"nologin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nologin:\n    type: mysql:User\n    properties:\n      authPlugin: mysql_no_login\n      host: example.com\n      user: nologin\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n### With An Authentication Plugin And Hashed Password\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst nologin = new mysql.User(\"nologin\", {\n    authPlugin: \"mysql_native_password\",\n    authStringHashed: \"*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19\",\n    host: \"example.com\",\n    user: \"nologin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nnologin = mysql.User(\"nologin\",\n    auth_plugin=\"mysql_native_password\",\n    auth_string_hashed=\"*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19\",\n    host=\"example.com\",\n    user=\"nologin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nologin = new Mysql.User(\"nologin\", new()\n    {\n        AuthPlugin = \"mysql_native_password\",\n        AuthStringHashed = \"*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19\",\n        Host = \"example.com\",\n        Username = \"nologin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewUser(ctx, \"nologin\", \u0026mysql.UserArgs{\n\t\t\tAuthPlugin:       pulumi.String(\"mysql_native_password\"),\n\t\t\tAuthStringHashed: pulumi.String(\"*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19\"),\n\t\t\tHost:             pulumi.String(\"example.com\"),\n\t\t\tUser:             pulumi.String(\"nologin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.User;\nimport com.pulumi.mysql.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nologin = new User(\"nologin\", UserArgs.builder()        \n            .authPlugin(\"mysql_native_password\")\n            .authStringHashed(\"*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19\")\n            .host(\"example.com\")\n            .user(\"nologin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nologin:\n    type: mysql:User\n    properties:\n      authPlugin: mysql_native_password\n      authStringHashed: '*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19'\n      host: example.com\n      user: nologin\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n### With AzureAD Authentication Plugin\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@unobravo/pulumi-mysql\";\n\nconst aadupn = new mysql.User(\"aadupn\", {\n    aadIdentity: {\n        identity: \"little.johny@doe.onmicrosoft.com\",\n        type: \"user\",\n    },\n    authPlugin: \"aad_auth\",\n    user: \"aliasToUseWhenConnectiong\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\naadupn = mysql.User(\"aadupn\",\n    aad_identity=mysql.UserAadIdentityArgs(\n        identity=\"little.johny@doe.onmicrosoft.com\",\n        type=\"user\",\n    ),\n    auth_plugin=\"aad_auth\",\n    user=\"aliasToUseWhenConnectiong\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aadupn = new Mysql.User(\"aadupn\", new()\n    {\n        AadIdentity = new Mysql.Inputs.UserAadIdentityArgs\n        {\n            Identity = \"little.johny@doe.onmicrosoft.com\",\n            Type = \"user\",\n        },\n        AuthPlugin = \"aad_auth\",\n        Username = \"aliasToUseWhenConnectiong\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewUser(ctx, \"aadupn\", \u0026mysql.UserArgs{\n\t\t\tAadIdentity: \u0026mysql.UserAadIdentityArgs{\n\t\t\t\tIdentity: pulumi.String(\"little.johny@doe.onmicrosoft.com\"),\n\t\t\t\tType:     pulumi.String(\"user\"),\n\t\t\t},\n\t\t\tAuthPlugin: pulumi.String(\"aad_auth\"),\n\t\t\tUser:       pulumi.String(\"aliasToUseWhenConnectiong\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.User;\nimport com.pulumi.mysql.UserArgs;\nimport com.pulumi.mysql.inputs.UserAadIdentityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var aadupn = new User(\"aadupn\", UserArgs.builder()        \n            .aadIdentity(UserAadIdentityArgs.builder()\n                .identity(\"little.johny@doe.onmicrosoft.com\")\n                .type(\"user\")\n                .build())\n            .authPlugin(\"aad_auth\")\n            .user(\"aliasToUseWhenConnectiong\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  aadupn:\n    type: mysql:User\n    properties:\n      aadIdentity:\n        identity: little.johny@doe.onmicrosoft.com\n        type: user\n      authPlugin: aad_auth\n      user: aliasToUseWhenConnectiong\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note on Azure Database for MySQL Single Server resource:** If you want to use this for `service_principal` with older Azure Database for MySQL Single Server resource, you need to set param `aad_auth_validate_oids_in_tenant` to `OFF` in provider configuration. For more details see this issue.\n\n## Import\n\nUsers can be imported using user and host.\n\n```sh\n$ pulumi import mysql:index/user:User example user@host\n```\n",
            "properties": {
                "aadIdentity": {
                    "$ref": "#/types/mysql:index/UserAadIdentity:UserAadIdentity",
                    "description": "Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.\n"
                },
                "authPlugin": {
                    "type": "string",
                    "description": "Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.\n"
                },
                "authStringHashed": {
                    "type": "string",
                    "description": "Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to \"localhost\".\n"
                },
                "password": {
                    "type": "string",
                    "description": "Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.\n",
                    "deprecationMessage": "Please use plaintext_password instead",
                    "secret": true
                },
                "plaintextPassword": {
                    "type": "string",
                    "description": "The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.\n",
                    "secret": true
                },
                "retainOldPassword": {
                    "type": "boolean",
                    "description": "When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.\n"
                },
                "tlsOption": {
                    "type": "string",
                    "description": "An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.\n\n[ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html\n"
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "language": {
                        "csharp": {
                            "name": "Username"
                        }
                    }
                }
            },
            "required": [
                "user"
            ],
            "inputProperties": {
                "aadIdentity": {
                    "$ref": "#/types/mysql:index/UserAadIdentity:UserAadIdentity",
                    "description": "Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.\n",
                    "willReplaceOnChanges": true
                },
                "authPlugin": {
                    "type": "string",
                    "description": "Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.\n",
                    "willReplaceOnChanges": true
                },
                "authStringHashed": {
                    "type": "string",
                    "description": "Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to \"localhost\".\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.\n",
                    "deprecationMessage": "Please use plaintext_password instead",
                    "secret": true
                },
                "plaintextPassword": {
                    "type": "string",
                    "description": "The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.\n",
                    "secret": true
                },
                "retainOldPassword": {
                    "type": "boolean",
                    "description": "When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.\n"
                },
                "tlsOption": {
                    "type": "string",
                    "description": "An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.\n\n[ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html\n"
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "language": {
                        "csharp": {
                            "name": "Username"
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "aadIdentity": {
                        "$ref": "#/types/mysql:index/UserAadIdentity:UserAadIdentity",
                        "description": "Required when `auth_plugin` is `aad_auth`. This should be block containing `type` and `identity`. `type` can be one of `user`, `group` and `service_principal`. `identity` then should containt either UPN of user, name of group or Client ID of service principal.\n",
                        "willReplaceOnChanges": true
                    },
                    "authPlugin": {
                        "type": "string",
                        "description": "Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.\n",
                        "willReplaceOnChanges": true
                    },
                    "authStringHashed": {
                        "type": "string",
                        "description": "Use an already hashed string as a parameter to `auth_plugin`. This can be used with passwords as well as with other auth strings.\n",
                        "secret": true
                    },
                    "host": {
                        "type": "string",
                        "description": "The source host of the user. Defaults to \"localhost\".\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.\n",
                        "deprecationMessage": "Please use plaintext_password instead",
                        "secret": true
                    },
                    "plaintextPassword": {
                        "type": "string",
                        "description": "The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.\n",
                        "secret": true
                    },
                    "retainOldPassword": {
                        "type": "boolean",
                        "description": "When `true`, the old password is retained when changing the password. Defaults to `false`. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See [MySQL Dual Password documentation](https://dev.mysql.com/doc/refman/8.0/en/password-management.html#dual-passwords) for more.\n"
                    },
                    "tlsOption": {
                        "type": "string",
                        "description": "An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.\n\n[ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The name of the user.\n",
                        "language": {
                            "csharp": {
                                "name": "Username"
                            }
                        },
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/userPassword:UserPassword": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to `localhost`.\n"
                },
                "plaintextPassword": {
                    "type": "string",
                    "secret": true
                },
                "retainOldPassword": {
                    "type": "boolean"
                },
                "user": {
                    "type": "string",
                    "description": "The IAM user to associate with this access key.\n"
                }
            },
            "required": [
                "user"
            ],
            "inputProperties": {
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to `localhost`.\n",
                    "willReplaceOnChanges": true
                },
                "plaintextPassword": {
                    "type": "string",
                    "secret": true
                },
                "retainOldPassword": {
                    "type": "boolean"
                },
                "user": {
                    "type": "string",
                    "description": "The IAM user to associate with this access key.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPassword resources.\n",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "The source host of the user. Defaults to `localhost`.\n",
                        "willReplaceOnChanges": true
                    },
                    "plaintextPassword": {
                        "type": "string",
                        "secret": true
                    },
                    "retainOldPassword": {
                        "type": "boolean"
                    },
                    "user": {
                        "type": "string",
                        "description": "The IAM user to associate with this access key.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "mysql:index/getDatabases:getDatabases": {
            "description": "The ``mysql.getDatabases`` gets databases on a MySQL\nserver.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst app = mysql.getDatabases({\n    pattern: \"test_%\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\napp = mysql.get_databases(pattern=\"test_%\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = Mysql.GetDatabases.Invoke(new()\n    {\n        Pattern = \"test_%\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.GetDatabases(ctx, \u0026mysql.GetDatabasesArgs{\n\t\t\tPattern: pulumi.StringRef(\"test_%\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.MysqlFunctions;\nimport com.pulumi.mysql.inputs.GetDatabasesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = MysqlFunctions.getDatabases(GetDatabasesArgs.builder()\n            .pattern(\"test_%\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  app:\n    fn::invoke:\n      Function: mysql:getDatabases\n      Arguments:\n        pattern: test_%\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabases.\n",
                "properties": {
                    "pattern": {
                        "type": "string",
                        "description": "Patterns for searching databases.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabases.\n",
                "properties": {
                    "databases": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of the database names.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "pattern": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databases",
                    "id"
                ]
            }
        },
        "mysql:index/getTables:getTables": {
            "description": "The ``mysql.getTables`` gets tables on a MySQL\nserver.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst app = mysql.getTables({\n    database: \"my_awesome_app\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\napp = mysql.get_tables(database=\"my_awesome_app\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mysql = Pulumi.Mysql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = Mysql.GetTables.Invoke(new()\n    {\n        Database = \"my_awesome_app\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/unobravo/pulumi-mysql/sdk/go/mysql\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.GetTables(ctx, \u0026mysql.GetTablesArgs{\n\t\t\tDatabase: \"my_awesome_app\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.MysqlFunctions;\nimport com.pulumi.mysql.inputs.GetTablesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var app = MysqlFunctions.getTables(GetTablesArgs.builder()\n            .database(\"my_awesome_app\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  app:\n    fn::invoke:\n      Function: mysql:getTables\n      Arguments:\n        database: my_awesome_app\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTables.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The name of the database.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Patterns for searching tables.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTables.\n",
                "properties": {
                    "database": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "pattern": {
                        "type": "string"
                    },
                    "tables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of the table names.\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "tables",
                    "id"
                ]
            }
        }
    }
}